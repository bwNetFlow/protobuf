// source: flow-messages-enriched.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.flowmessageenriched.FlowMessage');
goog.provide('proto.flowmessageenriched.FlowMessage.FlowType');
goog.provide('proto.flowmessageenriched.FlowMessage.NormalizedType');
goog.provide('proto.flowmessageenriched.FlowMessage.RemoteAddrType');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flowmessageenriched.FlowMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.flowmessageenriched.FlowMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flowmessageenriched.FlowMessage.displayName = 'proto.flowmessageenriched.FlowMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flowmessageenriched.FlowMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.flowmessageenriched.FlowMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flowmessageenriched.FlowMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flowmessageenriched.FlowMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timereceived: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sequencenum: jspb.Message.getFieldWithDefault(msg, 4, 0),
    samplingrate: jspb.Message.getFieldWithDefault(msg, 3, 0),
    flowdirection: jspb.Message.getFieldWithDefault(msg, 42, 0),
    sampleraddress: msg.getSampleraddress_asB64(),
    timeflowstart: jspb.Message.getFieldWithDefault(msg, 38, 0),
    timeflowend: jspb.Message.getFieldWithDefault(msg, 5, 0),
    bytes: jspb.Message.getFieldWithDefault(msg, 9, 0),
    packets: jspb.Message.getFieldWithDefault(msg, 10, 0),
    srcaddr: msg.getSrcaddr_asB64(),
    dstaddr: msg.getDstaddr_asB64(),
    etype: jspb.Message.getFieldWithDefault(msg, 30, 0),
    proto: jspb.Message.getFieldWithDefault(msg, 20, 0),
    srcport: jspb.Message.getFieldWithDefault(msg, 21, 0),
    dstport: jspb.Message.getFieldWithDefault(msg, 22, 0),
    inif: jspb.Message.getFieldWithDefault(msg, 18, 0),
    outif: jspb.Message.getFieldWithDefault(msg, 19, 0),
    srcmac: jspb.Message.getFieldWithDefault(msg, 27, 0),
    dstmac: jspb.Message.getFieldWithDefault(msg, 28, 0),
    srcvlan: jspb.Message.getFieldWithDefault(msg, 33, 0),
    dstvlan: jspb.Message.getFieldWithDefault(msg, 34, 0),
    vlanid: jspb.Message.getFieldWithDefault(msg, 29, 0),
    ingressvrfid: jspb.Message.getFieldWithDefault(msg, 39, 0),
    egressvrfid: jspb.Message.getFieldWithDefault(msg, 40, 0),
    iptos: jspb.Message.getFieldWithDefault(msg, 23, 0),
    forwardingstatus: jspb.Message.getFieldWithDefault(msg, 24, 0),
    ipttl: jspb.Message.getFieldWithDefault(msg, 25, 0),
    tcpflags: jspb.Message.getFieldWithDefault(msg, 26, 0),
    icmptype: jspb.Message.getFieldWithDefault(msg, 31, 0),
    icmpcode: jspb.Message.getFieldWithDefault(msg, 32, 0),
    ipv6flowlabel: jspb.Message.getFieldWithDefault(msg, 37, 0),
    fragmentid: jspb.Message.getFieldWithDefault(msg, 35, 0),
    fragmentoffset: jspb.Message.getFieldWithDefault(msg, 36, 0),
    biflowdirection: jspb.Message.getFieldWithDefault(msg, 41, 0),
    srcas: jspb.Message.getFieldWithDefault(msg, 14, 0),
    dstas: jspb.Message.getFieldWithDefault(msg, 15, 0),
    nexthop: msg.getNexthop_asB64(),
    nexthopas: jspb.Message.getFieldWithDefault(msg, 13, 0),
    srcnet: jspb.Message.getFieldWithDefault(msg, 16, 0),
    dstnet: jspb.Message.getFieldWithDefault(msg, 17, 0),
    hasmpls: jspb.Message.getBooleanFieldWithDefault(msg, 53, false),
    mplscount: jspb.Message.getFieldWithDefault(msg, 54, 0),
    mpls1ttl: jspb.Message.getFieldWithDefault(msg, 55, 0),
    mpls1label: jspb.Message.getFieldWithDefault(msg, 56, 0),
    mpls2ttl: jspb.Message.getFieldWithDefault(msg, 57, 0),
    mpls2label: jspb.Message.getFieldWithDefault(msg, 58, 0),
    mpls3ttl: jspb.Message.getFieldWithDefault(msg, 59, 0),
    mpls3label: jspb.Message.getFieldWithDefault(msg, 60, 0),
    mplslastttl: jspb.Message.getFieldWithDefault(msg, 61, 0),
    mplslastlabel: jspb.Message.getFieldWithDefault(msg, 62, 0),
    cid: jspb.Message.getFieldWithDefault(msg, 1000, 0),
    cidstring: jspb.Message.getFieldWithDefault(msg, 1001, ""),
    srccid: jspb.Message.getFieldWithDefault(msg, 1012, 0),
    dstcid: jspb.Message.getFieldWithDefault(msg, 1013, 0),
    normalized: jspb.Message.getFieldWithDefault(msg, 1002, 0),
    srcifname: jspb.Message.getFieldWithDefault(msg, 1003, ""),
    srcifdesc: jspb.Message.getFieldWithDefault(msg, 1004, ""),
    srcifspeed: jspb.Message.getFieldWithDefault(msg, 1005, 0),
    dstifname: jspb.Message.getFieldWithDefault(msg, 1006, ""),
    dstifdesc: jspb.Message.getFieldWithDefault(msg, 1007, ""),
    dstifspeed: jspb.Message.getFieldWithDefault(msg, 1008, 0),
    protoname: jspb.Message.getFieldWithDefault(msg, 1009, ""),
    remotecountry: jspb.Message.getFieldWithDefault(msg, 1010, ""),
    srccountry: jspb.Message.getFieldWithDefault(msg, 1014, ""),
    dstcountry: jspb.Message.getFieldWithDefault(msg, 1015, ""),
    remoteaddr: jspb.Message.getFieldWithDefault(msg, 1011, 0),
    note: jspb.Message.getFieldWithDefault(msg, 1016, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flowmessageenriched.FlowMessage}
 */
proto.flowmessageenriched.FlowMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flowmessageenriched.FlowMessage;
  return proto.flowmessageenriched.FlowMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flowmessageenriched.FlowMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flowmessageenriched.FlowMessage}
 */
proto.flowmessageenriched.FlowMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.flowmessageenriched.FlowMessage.FlowType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimereceived(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSequencenum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSamplingrate(value);
      break;
    case 42:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlowdirection(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSampleraddress(value);
      break;
    case 38:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeflowstart(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeflowend(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytes(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPackets(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSrcaddr(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDstaddr(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEtype(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProto(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSrcport(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDstport(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInif(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOutif(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSrcmac(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDstmac(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSrcvlan(value);
      break;
    case 34:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDstvlan(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVlanid(value);
      break;
    case 39:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIngressvrfid(value);
      break;
    case 40:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEgressvrfid(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIptos(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setForwardingstatus(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIpttl(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTcpflags(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIcmptype(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIcmpcode(value);
      break;
    case 37:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIpv6flowlabel(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFragmentid(value);
      break;
    case 36:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFragmentoffset(value);
      break;
    case 41:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBiflowdirection(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSrcas(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDstas(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNexthop(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNexthopas(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSrcnet(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDstnet(value);
      break;
    case 53:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasmpls(value);
      break;
    case 54:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMplscount(value);
      break;
    case 55:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMpls1ttl(value);
      break;
    case 56:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMpls1label(value);
      break;
    case 57:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMpls2ttl(value);
      break;
    case 58:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMpls2label(value);
      break;
    case 59:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMpls3ttl(value);
      break;
    case 60:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMpls3label(value);
      break;
    case 61:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMplslastttl(value);
      break;
    case 62:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMplslastlabel(value);
      break;
    case 1000:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCid(value);
      break;
    case 1001:
      var value = /** @type {string} */ (reader.readString());
      msg.setCidstring(value);
      break;
    case 1012:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSrccid(value);
      break;
    case 1013:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDstcid(value);
      break;
    case 1002:
      var value = /** @type {!proto.flowmessageenriched.FlowMessage.NormalizedType} */ (reader.readEnum());
      msg.setNormalized(value);
      break;
    case 1003:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcifname(value);
      break;
    case 1004:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcifdesc(value);
      break;
    case 1005:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSrcifspeed(value);
      break;
    case 1006:
      var value = /** @type {string} */ (reader.readString());
      msg.setDstifname(value);
      break;
    case 1007:
      var value = /** @type {string} */ (reader.readString());
      msg.setDstifdesc(value);
      break;
    case 1008:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDstifspeed(value);
      break;
    case 1009:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtoname(value);
      break;
    case 1010:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemotecountry(value);
      break;
    case 1014:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrccountry(value);
      break;
    case 1015:
      var value = /** @type {string} */ (reader.readString());
      msg.setDstcountry(value);
      break;
    case 1011:
      var value = /** @type {!proto.flowmessageenriched.FlowMessage.RemoteAddrType} */ (reader.readEnum());
      msg.setRemoteaddr(value);
      break;
    case 1016:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flowmessageenriched.FlowMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flowmessageenriched.FlowMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flowmessageenriched.FlowMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flowmessageenriched.FlowMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTimereceived();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSequencenum();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSamplingrate();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFlowdirection();
  if (f !== 0) {
    writer.writeUint32(
      42,
      f
    );
  }
  f = message.getSampleraddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getTimeflowstart();
  if (f !== 0) {
    writer.writeUint64(
      38,
      f
    );
  }
  f = message.getTimeflowend();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getBytes();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getPackets();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getSrcaddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getDstaddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getEtype();
  if (f !== 0) {
    writer.writeUint32(
      30,
      f
    );
  }
  f = message.getProto();
  if (f !== 0) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = message.getSrcport();
  if (f !== 0) {
    writer.writeUint32(
      21,
      f
    );
  }
  f = message.getDstport();
  if (f !== 0) {
    writer.writeUint32(
      22,
      f
    );
  }
  f = message.getInif();
  if (f !== 0) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = message.getOutif();
  if (f !== 0) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = message.getSrcmac();
  if (f !== 0) {
    writer.writeUint64(
      27,
      f
    );
  }
  f = message.getDstmac();
  if (f !== 0) {
    writer.writeUint64(
      28,
      f
    );
  }
  f = message.getSrcvlan();
  if (f !== 0) {
    writer.writeUint32(
      33,
      f
    );
  }
  f = message.getDstvlan();
  if (f !== 0) {
    writer.writeUint32(
      34,
      f
    );
  }
  f = message.getVlanid();
  if (f !== 0) {
    writer.writeUint32(
      29,
      f
    );
  }
  f = message.getIngressvrfid();
  if (f !== 0) {
    writer.writeUint32(
      39,
      f
    );
  }
  f = message.getEgressvrfid();
  if (f !== 0) {
    writer.writeUint32(
      40,
      f
    );
  }
  f = message.getIptos();
  if (f !== 0) {
    writer.writeUint32(
      23,
      f
    );
  }
  f = message.getForwardingstatus();
  if (f !== 0) {
    writer.writeUint32(
      24,
      f
    );
  }
  f = message.getIpttl();
  if (f !== 0) {
    writer.writeUint32(
      25,
      f
    );
  }
  f = message.getTcpflags();
  if (f !== 0) {
    writer.writeUint32(
      26,
      f
    );
  }
  f = message.getIcmptype();
  if (f !== 0) {
    writer.writeUint32(
      31,
      f
    );
  }
  f = message.getIcmpcode();
  if (f !== 0) {
    writer.writeUint32(
      32,
      f
    );
  }
  f = message.getIpv6flowlabel();
  if (f !== 0) {
    writer.writeUint32(
      37,
      f
    );
  }
  f = message.getFragmentid();
  if (f !== 0) {
    writer.writeUint32(
      35,
      f
    );
  }
  f = message.getFragmentoffset();
  if (f !== 0) {
    writer.writeUint32(
      36,
      f
    );
  }
  f = message.getBiflowdirection();
  if (f !== 0) {
    writer.writeUint32(
      41,
      f
    );
  }
  f = message.getSrcas();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getDstas();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = message.getNexthop_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getNexthopas();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getSrcnet();
  if (f !== 0) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = message.getDstnet();
  if (f !== 0) {
    writer.writeUint32(
      17,
      f
    );
  }
  f = message.getHasmpls();
  if (f) {
    writer.writeBool(
      53,
      f
    );
  }
  f = message.getMplscount();
  if (f !== 0) {
    writer.writeUint32(
      54,
      f
    );
  }
  f = message.getMpls1ttl();
  if (f !== 0) {
    writer.writeUint32(
      55,
      f
    );
  }
  f = message.getMpls1label();
  if (f !== 0) {
    writer.writeUint32(
      56,
      f
    );
  }
  f = message.getMpls2ttl();
  if (f !== 0) {
    writer.writeUint32(
      57,
      f
    );
  }
  f = message.getMpls2label();
  if (f !== 0) {
    writer.writeUint32(
      58,
      f
    );
  }
  f = message.getMpls3ttl();
  if (f !== 0) {
    writer.writeUint32(
      59,
      f
    );
  }
  f = message.getMpls3label();
  if (f !== 0) {
    writer.writeUint32(
      60,
      f
    );
  }
  f = message.getMplslastttl();
  if (f !== 0) {
    writer.writeUint32(
      61,
      f
    );
  }
  f = message.getMplslastlabel();
  if (f !== 0) {
    writer.writeUint32(
      62,
      f
    );
  }
  f = message.getCid();
  if (f !== 0) {
    writer.writeUint32(
      1000,
      f
    );
  }
  f = message.getCidstring();
  if (f.length > 0) {
    writer.writeString(
      1001,
      f
    );
  }
  f = message.getSrccid();
  if (f !== 0) {
    writer.writeUint32(
      1012,
      f
    );
  }
  f = message.getDstcid();
  if (f !== 0) {
    writer.writeUint32(
      1013,
      f
    );
  }
  f = message.getNormalized();
  if (f !== 0.0) {
    writer.writeEnum(
      1002,
      f
    );
  }
  f = message.getSrcifname();
  if (f.length > 0) {
    writer.writeString(
      1003,
      f
    );
  }
  f = message.getSrcifdesc();
  if (f.length > 0) {
    writer.writeString(
      1004,
      f
    );
  }
  f = message.getSrcifspeed();
  if (f !== 0) {
    writer.writeUint32(
      1005,
      f
    );
  }
  f = message.getDstifname();
  if (f.length > 0) {
    writer.writeString(
      1006,
      f
    );
  }
  f = message.getDstifdesc();
  if (f.length > 0) {
    writer.writeString(
      1007,
      f
    );
  }
  f = message.getDstifspeed();
  if (f !== 0) {
    writer.writeUint32(
      1008,
      f
    );
  }
  f = message.getProtoname();
  if (f.length > 0) {
    writer.writeString(
      1009,
      f
    );
  }
  f = message.getRemotecountry();
  if (f.length > 0) {
    writer.writeString(
      1010,
      f
    );
  }
  f = message.getSrccountry();
  if (f.length > 0) {
    writer.writeString(
      1014,
      f
    );
  }
  f = message.getDstcountry();
  if (f.length > 0) {
    writer.writeString(
      1015,
      f
    );
  }
  f = message.getRemoteaddr();
  if (f !== 0.0) {
    writer.writeEnum(
      1011,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      1016,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.flowmessageenriched.FlowMessage.FlowType = {
  FLOWUNKNOWN: 0,
  SFLOW_5: 1,
  NETFLOW_V5: 2,
  NETFLOW_V9: 3,
  IPFIX: 4
};

/**
 * @enum {number}
 */
proto.flowmessageenriched.FlowMessage.NormalizedType = {
  NO: 0,
  YES: 1
};

/**
 * @enum {number}
 */
proto.flowmessageenriched.FlowMessage.RemoteAddrType = {
  NEITHER: 0,
  SRC: 1,
  DST: 2
};

/**
 * optional FlowType Type = 1;
 * @return {!proto.flowmessageenriched.FlowMessage.FlowType}
 */
proto.flowmessageenriched.FlowMessage.prototype.getType = function() {
  return /** @type {!proto.flowmessageenriched.FlowMessage.FlowType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.flowmessageenriched.FlowMessage.FlowType} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 TimeReceived = 2;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getTimereceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setTimereceived = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 SequenceNum = 4;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getSequencenum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setSequencenum = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 SamplingRate = 3;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getSamplingrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setSamplingrate = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 FlowDirection = 42;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getFlowdirection = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 42, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setFlowdirection = function(value) {
  return jspb.Message.setProto3IntField(this, 42, value);
};


/**
 * optional bytes SamplerAddress = 11;
 * @return {string}
 */
proto.flowmessageenriched.FlowMessage.prototype.getSampleraddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes SamplerAddress = 11;
 * This is a type-conversion wrapper around `getSampleraddress()`
 * @return {string}
 */
proto.flowmessageenriched.FlowMessage.prototype.getSampleraddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSampleraddress()));
};


/**
 * optional bytes SamplerAddress = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSampleraddress()`
 * @return {!Uint8Array}
 */
proto.flowmessageenriched.FlowMessage.prototype.getSampleraddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSampleraddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setSampleraddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional uint64 TimeFlowStart = 38;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getTimeflowstart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 38, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setTimeflowstart = function(value) {
  return jspb.Message.setProto3IntField(this, 38, value);
};


/**
 * optional uint64 TimeFlowEnd = 5;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getTimeflowend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setTimeflowend = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 Bytes = 9;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 Packets = 10;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getPackets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setPackets = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bytes SrcAddr = 6;
 * @return {string}
 */
proto.flowmessageenriched.FlowMessage.prototype.getSrcaddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes SrcAddr = 6;
 * This is a type-conversion wrapper around `getSrcaddr()`
 * @return {string}
 */
proto.flowmessageenriched.FlowMessage.prototype.getSrcaddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSrcaddr()));
};


/**
 * optional bytes SrcAddr = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSrcaddr()`
 * @return {!Uint8Array}
 */
proto.flowmessageenriched.FlowMessage.prototype.getSrcaddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSrcaddr()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setSrcaddr = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes DstAddr = 7;
 * @return {string}
 */
proto.flowmessageenriched.FlowMessage.prototype.getDstaddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes DstAddr = 7;
 * This is a type-conversion wrapper around `getDstaddr()`
 * @return {string}
 */
proto.flowmessageenriched.FlowMessage.prototype.getDstaddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDstaddr()));
};


/**
 * optional bytes DstAddr = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDstaddr()`
 * @return {!Uint8Array}
 */
proto.flowmessageenriched.FlowMessage.prototype.getDstaddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDstaddr()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setDstaddr = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional uint32 Etype = 30;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getEtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setEtype = function(value) {
  return jspb.Message.setProto3IntField(this, 30, value);
};


/**
 * optional uint32 Proto = 20;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getProto = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setProto = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional uint32 SrcPort = 21;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getSrcport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setSrcport = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional uint32 DstPort = 22;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getDstport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setDstport = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional uint32 InIf = 18;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getInif = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setInif = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional uint32 OutIf = 19;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getOutif = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setOutif = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional uint64 SrcMac = 27;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getSrcmac = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setSrcmac = function(value) {
  return jspb.Message.setProto3IntField(this, 27, value);
};


/**
 * optional uint64 DstMac = 28;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getDstmac = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 28, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setDstmac = function(value) {
  return jspb.Message.setProto3IntField(this, 28, value);
};


/**
 * optional uint32 SrcVlan = 33;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getSrcvlan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 33, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setSrcvlan = function(value) {
  return jspb.Message.setProto3IntField(this, 33, value);
};


/**
 * optional uint32 DstVlan = 34;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getDstvlan = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 34, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setDstvlan = function(value) {
  return jspb.Message.setProto3IntField(this, 34, value);
};


/**
 * optional uint32 VlanId = 29;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getVlanid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 29, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setVlanid = function(value) {
  return jspb.Message.setProto3IntField(this, 29, value);
};


/**
 * optional uint32 IngressVrfID = 39;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getIngressvrfid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 39, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setIngressvrfid = function(value) {
  return jspb.Message.setProto3IntField(this, 39, value);
};


/**
 * optional uint32 EgressVrfID = 40;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getEgressvrfid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 40, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setEgressvrfid = function(value) {
  return jspb.Message.setProto3IntField(this, 40, value);
};


/**
 * optional uint32 IPTos = 23;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getIptos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setIptos = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional uint32 ForwardingStatus = 24;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getForwardingstatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setForwardingstatus = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional uint32 IPTTL = 25;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getIpttl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setIpttl = function(value) {
  return jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional uint32 TCPFlags = 26;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getTcpflags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setTcpflags = function(value) {
  return jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * optional uint32 IcmpType = 31;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getIcmptype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setIcmptype = function(value) {
  return jspb.Message.setProto3IntField(this, 31, value);
};


/**
 * optional uint32 IcmpCode = 32;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getIcmpcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setIcmpcode = function(value) {
  return jspb.Message.setProto3IntField(this, 32, value);
};


/**
 * optional uint32 IPv6FlowLabel = 37;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getIpv6flowlabel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 37, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setIpv6flowlabel = function(value) {
  return jspb.Message.setProto3IntField(this, 37, value);
};


/**
 * optional uint32 FragmentId = 35;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getFragmentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 35, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setFragmentid = function(value) {
  return jspb.Message.setProto3IntField(this, 35, value);
};


/**
 * optional uint32 FragmentOffset = 36;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getFragmentoffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 36, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setFragmentoffset = function(value) {
  return jspb.Message.setProto3IntField(this, 36, value);
};


/**
 * optional uint32 BiFlowDirection = 41;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getBiflowdirection = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 41, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setBiflowdirection = function(value) {
  return jspb.Message.setProto3IntField(this, 41, value);
};


/**
 * optional uint32 SrcAS = 14;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getSrcas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setSrcas = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint32 DstAS = 15;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getDstas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setDstas = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional bytes NextHop = 12;
 * @return {string}
 */
proto.flowmessageenriched.FlowMessage.prototype.getNexthop = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes NextHop = 12;
 * This is a type-conversion wrapper around `getNexthop()`
 * @return {string}
 */
proto.flowmessageenriched.FlowMessage.prototype.getNexthop_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNexthop()));
};


/**
 * optional bytes NextHop = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNexthop()`
 * @return {!Uint8Array}
 */
proto.flowmessageenriched.FlowMessage.prototype.getNexthop_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNexthop()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setNexthop = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional uint32 NextHopAS = 13;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getNexthopas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setNexthopas = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional uint32 SrcNet = 16;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getSrcnet = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setSrcnet = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional uint32 DstNet = 17;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getDstnet = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setDstnet = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional bool HasMPLS = 53;
 * @return {boolean}
 */
proto.flowmessageenriched.FlowMessage.prototype.getHasmpls = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 53, false));
};


/**
 * @param {boolean} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setHasmpls = function(value) {
  return jspb.Message.setProto3BooleanField(this, 53, value);
};


/**
 * optional uint32 MPLSCount = 54;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getMplscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 54, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setMplscount = function(value) {
  return jspb.Message.setProto3IntField(this, 54, value);
};


/**
 * optional uint32 MPLS1TTL = 55;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getMpls1ttl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 55, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setMpls1ttl = function(value) {
  return jspb.Message.setProto3IntField(this, 55, value);
};


/**
 * optional uint32 MPLS1Label = 56;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getMpls1label = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 56, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setMpls1label = function(value) {
  return jspb.Message.setProto3IntField(this, 56, value);
};


/**
 * optional uint32 MPLS2TTL = 57;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getMpls2ttl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 57, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setMpls2ttl = function(value) {
  return jspb.Message.setProto3IntField(this, 57, value);
};


/**
 * optional uint32 MPLS2Label = 58;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getMpls2label = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 58, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setMpls2label = function(value) {
  return jspb.Message.setProto3IntField(this, 58, value);
};


/**
 * optional uint32 MPLS3TTL = 59;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getMpls3ttl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 59, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setMpls3ttl = function(value) {
  return jspb.Message.setProto3IntField(this, 59, value);
};


/**
 * optional uint32 MPLS3Label = 60;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getMpls3label = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 60, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setMpls3label = function(value) {
  return jspb.Message.setProto3IntField(this, 60, value);
};


/**
 * optional uint32 MPLSLastTTL = 61;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getMplslastttl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 61, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setMplslastttl = function(value) {
  return jspb.Message.setProto3IntField(this, 61, value);
};


/**
 * optional uint32 MPLSLastLabel = 62;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getMplslastlabel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 62, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setMplslastlabel = function(value) {
  return jspb.Message.setProto3IntField(this, 62, value);
};


/**
 * optional uint32 Cid = 1000;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getCid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1000, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setCid = function(value) {
  return jspb.Message.setProto3IntField(this, 1000, value);
};


/**
 * optional string CidString = 1001;
 * @return {string}
 */
proto.flowmessageenriched.FlowMessage.prototype.getCidstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1001, ""));
};


/**
 * @param {string} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setCidstring = function(value) {
  return jspb.Message.setProto3StringField(this, 1001, value);
};


/**
 * optional uint32 SrcCid = 1012;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getSrccid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1012, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setSrccid = function(value) {
  return jspb.Message.setProto3IntField(this, 1012, value);
};


/**
 * optional uint32 DstCid = 1013;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getDstcid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1013, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setDstcid = function(value) {
  return jspb.Message.setProto3IntField(this, 1013, value);
};


/**
 * optional NormalizedType Normalized = 1002;
 * @return {!proto.flowmessageenriched.FlowMessage.NormalizedType}
 */
proto.flowmessageenriched.FlowMessage.prototype.getNormalized = function() {
  return /** @type {!proto.flowmessageenriched.FlowMessage.NormalizedType} */ (jspb.Message.getFieldWithDefault(this, 1002, 0));
};


/**
 * @param {!proto.flowmessageenriched.FlowMessage.NormalizedType} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setNormalized = function(value) {
  return jspb.Message.setProto3EnumField(this, 1002, value);
};


/**
 * optional string SrcIfName = 1003;
 * @return {string}
 */
proto.flowmessageenriched.FlowMessage.prototype.getSrcifname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1003, ""));
};


/**
 * @param {string} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setSrcifname = function(value) {
  return jspb.Message.setProto3StringField(this, 1003, value);
};


/**
 * optional string SrcIfDesc = 1004;
 * @return {string}
 */
proto.flowmessageenriched.FlowMessage.prototype.getSrcifdesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1004, ""));
};


/**
 * @param {string} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setSrcifdesc = function(value) {
  return jspb.Message.setProto3StringField(this, 1004, value);
};


/**
 * optional uint32 SrcIfSpeed = 1005;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getSrcifspeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1005, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setSrcifspeed = function(value) {
  return jspb.Message.setProto3IntField(this, 1005, value);
};


/**
 * optional string DstIfName = 1006;
 * @return {string}
 */
proto.flowmessageenriched.FlowMessage.prototype.getDstifname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1006, ""));
};


/**
 * @param {string} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setDstifname = function(value) {
  return jspb.Message.setProto3StringField(this, 1006, value);
};


/**
 * optional string DstIfDesc = 1007;
 * @return {string}
 */
proto.flowmessageenriched.FlowMessage.prototype.getDstifdesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1007, ""));
};


/**
 * @param {string} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setDstifdesc = function(value) {
  return jspb.Message.setProto3StringField(this, 1007, value);
};


/**
 * optional uint32 DstIfSpeed = 1008;
 * @return {number}
 */
proto.flowmessageenriched.FlowMessage.prototype.getDstifspeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1008, 0));
};


/**
 * @param {number} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setDstifspeed = function(value) {
  return jspb.Message.setProto3IntField(this, 1008, value);
};


/**
 * optional string ProtoName = 1009;
 * @return {string}
 */
proto.flowmessageenriched.FlowMessage.prototype.getProtoname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1009, ""));
};


/**
 * @param {string} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setProtoname = function(value) {
  return jspb.Message.setProto3StringField(this, 1009, value);
};


/**
 * optional string RemoteCountry = 1010;
 * @return {string}
 */
proto.flowmessageenriched.FlowMessage.prototype.getRemotecountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1010, ""));
};


/**
 * @param {string} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setRemotecountry = function(value) {
  return jspb.Message.setProto3StringField(this, 1010, value);
};


/**
 * optional string SrcCountry = 1014;
 * @return {string}
 */
proto.flowmessageenriched.FlowMessage.prototype.getSrccountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1014, ""));
};


/**
 * @param {string} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setSrccountry = function(value) {
  return jspb.Message.setProto3StringField(this, 1014, value);
};


/**
 * optional string DstCountry = 1015;
 * @return {string}
 */
proto.flowmessageenriched.FlowMessage.prototype.getDstcountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1015, ""));
};


/**
 * @param {string} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setDstcountry = function(value) {
  return jspb.Message.setProto3StringField(this, 1015, value);
};


/**
 * optional RemoteAddrType RemoteAddr = 1011;
 * @return {!proto.flowmessageenriched.FlowMessage.RemoteAddrType}
 */
proto.flowmessageenriched.FlowMessage.prototype.getRemoteaddr = function() {
  return /** @type {!proto.flowmessageenriched.FlowMessage.RemoteAddrType} */ (jspb.Message.getFieldWithDefault(this, 1011, 0));
};


/**
 * @param {!proto.flowmessageenriched.FlowMessage.RemoteAddrType} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setRemoteaddr = function(value) {
  return jspb.Message.setProto3EnumField(this, 1011, value);
};


/**
 * optional string Note = 1016;
 * @return {string}
 */
proto.flowmessageenriched.FlowMessage.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1016, ""));
};


/**
 * @param {string} value
 * @return {!proto.flowmessageenriched.FlowMessage} returns this
 */
proto.flowmessageenriched.FlowMessage.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 1016, value);
};


