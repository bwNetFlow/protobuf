// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: flow-messages-enriched.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Flowmessageenriched {

  /// <summary>Holder for reflection information generated from flow-messages-enriched.proto</summary>
  public static partial class FlowMessagesEnrichedReflection {

    #region Descriptor
    /// <summary>File descriptor for flow-messages-enriched.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FlowMessagesEnrichedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxmbG93LW1lc3NhZ2VzLWVucmljaGVkLnByb3RvEhNmbG93bWVzc2FnZWVu",
            "cmljaGVkIv0MCgtGbG93TWVzc2FnZRI3CgRUeXBlGAEgASgOMikuZmxvd21l",
            "c3NhZ2VlbnJpY2hlZC5GbG93TWVzc2FnZS5GbG93VHlwZRIUCgxUaW1lUmVj",
            "ZWl2ZWQYAiABKAQSEwoLU2VxdWVuY2VOdW0YBCABKA0SFAoMU2FtcGxpbmdS",
            "YXRlGAMgASgEEhUKDUZsb3dEaXJlY3Rpb24YKiABKA0SFgoOU2FtcGxlckFk",
            "ZHJlc3MYCyABKAwSFQoNVGltZUZsb3dTdGFydBgmIAEoBBITCgtUaW1lRmxv",
            "d0VuZBgFIAEoBBINCgVCeXRlcxgJIAEoBBIPCgdQYWNrZXRzGAogASgEEg8K",
            "B1NyY0FkZHIYBiABKAwSDwoHRHN0QWRkchgHIAEoDBINCgVFdHlwZRgeIAEo",
            "DRINCgVQcm90bxgUIAEoDRIPCgdTcmNQb3J0GBUgASgNEg8KB0RzdFBvcnQY",
            "FiABKA0SDAoESW5JZhgSIAEoDRINCgVPdXRJZhgTIAEoDRIOCgZTcmNNYWMY",
            "GyABKAQSDgoGRHN0TWFjGBwgASgEEg8KB1NyY1ZsYW4YISABKA0SDwoHRHN0",
            "VmxhbhgiIAEoDRIOCgZWbGFuSWQYHSABKA0SFAoMSW5ncmVzc1ZyZklEGCcg",
            "ASgNEhMKC0VncmVzc1ZyZklEGCggASgNEg0KBUlQVG9zGBcgASgNEhgKEEZv",
            "cndhcmRpbmdTdGF0dXMYGCABKA0SDQoFSVBUVEwYGSABKA0SEAoIVENQRmxh",
            "Z3MYGiABKA0SEAoISWNtcFR5cGUYHyABKA0SEAoISWNtcENvZGUYICABKA0S",
            "FQoNSVB2NkZsb3dMYWJlbBglIAEoDRISCgpGcmFnbWVudElkGCMgASgNEhYK",
            "DkZyYWdtZW50T2Zmc2V0GCQgASgNEhcKD0JpRmxvd0RpcmVjdGlvbhgpIAEo",
            "DRINCgVTcmNBUxgOIAEoDRINCgVEc3RBUxgPIAEoDRIPCgdOZXh0SG9wGAwg",
            "ASgMEhEKCU5leHRIb3BBUxgNIAEoDRIOCgZTcmNOZXQYECABKA0SDgoGRHN0",
            "TmV0GBEgASgNEhAKCEhhc0VuY2FwGCsgASgIEhQKDFNyY0FkZHJFbmNhcBgs",
            "IAEoDBIUCgxEc3RBZGRyRW5jYXAYLSABKAwSEgoKUHJvdG9FbmNhcBguIAEo",
            "DRISCgpFdHlwZUVuY2FwGC8gASgNEhIKCklQVG9zRW5jYXAYMCABKA0SEgoK",
            "SVBUVExFbmNhcBgxIAEoDRIaChJJUHY2Rmxvd0xhYmVsRW5jYXAYMiABKA0S",
            "FwoPRnJhZ21lbnRJZEVuY2FwGDMgASgNEhsKE0ZyYWdtZW50T2Zmc2V0RW5j",
            "YXAYNCABKA0SDwoHSGFzTVBMUxg1IAEoCBIRCglNUExTQ291bnQYNiABKA0S",
            "EAoITVBMUzFUVEwYNyABKA0SEgoKTVBMUzFMYWJlbBg4IAEoDRIQCghNUExT",
            "MlRUTBg5IAEoDRISCgpNUExTMkxhYmVsGDogASgNEhAKCE1QTFMzVFRMGDsg",
            "ASgNEhIKCk1QTFMzTGFiZWwYPCABKA0SEwoLTVBMU0xhc3RUVEwYPSABKA0S",
            "FQoNTVBMU0xhc3RMYWJlbBg+IAEoDRIOCgZIYXNQUFAYPyABKAgSGQoRUFBQ",
            "QWRkcmVzc0NvbnRyb2wYQCABKA0SDAoDQ2lkGOgHIAEoDRISCglDaWRTdHJp",
            "bmcY6QcgASgJEkQKCk5vcm1hbGl6ZWQY6gcgASgOMi8uZmxvd21lc3NhZ2Vl",
            "bnJpY2hlZC5GbG93TWVzc2FnZS5Ob3JtYWxpemVkVHlwZRISCglTcmNJZk5h",
            "bWUY6wcgASgJEhIKCVNyY0lmRGVzYxjsByABKAkSEwoKU3JjSWZTcGVlZBjt",
            "ByABKA0SEgoJRHN0SWZOYW1lGO4HIAEoCRISCglEc3RJZkRlc2MY7wcgASgJ",
            "EhMKCkRzdElmU3BlZWQY8AcgASgNEhIKCVByb3RvTmFtZRjxByABKAkSFgoN",
            "UmVtb3RlQ291bnRyeRjyByABKAkiUwoIRmxvd1R5cGUSDwoLRkxPV1VOS05P",
            "V04QABILCgdTRkxPV181EAESDgoKTkVURkxPV19WNRACEg4KCk5FVEZMT1df",
            "VjkQAxIJCgVJUEZJWBAEIiEKDk5vcm1hbGl6ZWRUeXBlEgYKAk5vEAASBwoD",
            "WWVzEAFCIgoJYnduZXRmbG93QhVGbG93TWVzc2FnZUVucmljaGVkUGJiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Flowmessageenriched.FlowMessage), global::Flowmessageenriched.FlowMessage.Parser, new[]{ "Type", "TimeReceived", "SequenceNum", "SamplingRate", "FlowDirection", "SamplerAddress", "TimeFlowStart", "TimeFlowEnd", "Bytes", "Packets", "SrcAddr", "DstAddr", "Etype", "Proto", "SrcPort", "DstPort", "InIf", "OutIf", "SrcMac", "DstMac", "SrcVlan", "DstVlan", "VlanId", "IngressVrfID", "EgressVrfID", "IPTos", "ForwardingStatus", "IPTTL", "TCPFlags", "IcmpType", "IcmpCode", "IPv6FlowLabel", "FragmentId", "FragmentOffset", "BiFlowDirection", "SrcAS", "DstAS", "NextHop", "NextHopAS", "SrcNet", "DstNet", "HasEncap", "SrcAddrEncap", "DstAddrEncap", "ProtoEncap", "EtypeEncap", "IPTosEncap", "IPTTLEncap", "IPv6FlowLabelEncap", "FragmentIdEncap", "FragmentOffsetEncap", "HasMPLS", "MPLSCount", "MPLS1TTL", "MPLS1Label", "MPLS2TTL", "MPLS2Label", "MPLS3TTL", "MPLS3Label", "MPLSLastTTL", "MPLSLastLabel", "HasPPP", "PPPAddressControl", "Cid", "CidString", "Normalized", "SrcIfName", "SrcIfDesc", "SrcIfSpeed", "DstIfName", "DstIfDesc", "DstIfSpeed", "ProtoName", "RemoteCountry" }, null, new[]{ typeof(global::Flowmessageenriched.FlowMessage.Types.FlowType), typeof(global::Flowmessageenriched.FlowMessage.Types.NormalizedType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FlowMessage : pb::IMessage<FlowMessage> {
    private static readonly pb::MessageParser<FlowMessage> _parser = new pb::MessageParser<FlowMessage>(() => new FlowMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlowMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Flowmessageenriched.FlowMessagesEnrichedReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlowMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlowMessage(FlowMessage other) : this() {
      type_ = other.type_;
      timeReceived_ = other.timeReceived_;
      sequenceNum_ = other.sequenceNum_;
      samplingRate_ = other.samplingRate_;
      flowDirection_ = other.flowDirection_;
      samplerAddress_ = other.samplerAddress_;
      timeFlowStart_ = other.timeFlowStart_;
      timeFlowEnd_ = other.timeFlowEnd_;
      bytes_ = other.bytes_;
      packets_ = other.packets_;
      srcAddr_ = other.srcAddr_;
      dstAddr_ = other.dstAddr_;
      etype_ = other.etype_;
      proto_ = other.proto_;
      srcPort_ = other.srcPort_;
      dstPort_ = other.dstPort_;
      inIf_ = other.inIf_;
      outIf_ = other.outIf_;
      srcMac_ = other.srcMac_;
      dstMac_ = other.dstMac_;
      srcVlan_ = other.srcVlan_;
      dstVlan_ = other.dstVlan_;
      vlanId_ = other.vlanId_;
      ingressVrfID_ = other.ingressVrfID_;
      egressVrfID_ = other.egressVrfID_;
      iPTos_ = other.iPTos_;
      forwardingStatus_ = other.forwardingStatus_;
      iPTTL_ = other.iPTTL_;
      tCPFlags_ = other.tCPFlags_;
      icmpType_ = other.icmpType_;
      icmpCode_ = other.icmpCode_;
      iPv6FlowLabel_ = other.iPv6FlowLabel_;
      fragmentId_ = other.fragmentId_;
      fragmentOffset_ = other.fragmentOffset_;
      biFlowDirection_ = other.biFlowDirection_;
      srcAS_ = other.srcAS_;
      dstAS_ = other.dstAS_;
      nextHop_ = other.nextHop_;
      nextHopAS_ = other.nextHopAS_;
      srcNet_ = other.srcNet_;
      dstNet_ = other.dstNet_;
      hasEncap_ = other.hasEncap_;
      srcAddrEncap_ = other.srcAddrEncap_;
      dstAddrEncap_ = other.dstAddrEncap_;
      protoEncap_ = other.protoEncap_;
      etypeEncap_ = other.etypeEncap_;
      iPTosEncap_ = other.iPTosEncap_;
      iPTTLEncap_ = other.iPTTLEncap_;
      iPv6FlowLabelEncap_ = other.iPv6FlowLabelEncap_;
      fragmentIdEncap_ = other.fragmentIdEncap_;
      fragmentOffsetEncap_ = other.fragmentOffsetEncap_;
      hasMPLS_ = other.hasMPLS_;
      mPLSCount_ = other.mPLSCount_;
      mPLS1TTL_ = other.mPLS1TTL_;
      mPLS1Label_ = other.mPLS1Label_;
      mPLS2TTL_ = other.mPLS2TTL_;
      mPLS2Label_ = other.mPLS2Label_;
      mPLS3TTL_ = other.mPLS3TTL_;
      mPLS3Label_ = other.mPLS3Label_;
      mPLSLastTTL_ = other.mPLSLastTTL_;
      mPLSLastLabel_ = other.mPLSLastLabel_;
      hasPPP_ = other.hasPPP_;
      pPPAddressControl_ = other.pPPAddressControl_;
      cid_ = other.cid_;
      cidString_ = other.cidString_;
      normalized_ = other.normalized_;
      srcIfName_ = other.srcIfName_;
      srcIfDesc_ = other.srcIfDesc_;
      srcIfSpeed_ = other.srcIfSpeed_;
      dstIfName_ = other.dstIfName_;
      dstIfDesc_ = other.dstIfDesc_;
      dstIfSpeed_ = other.dstIfSpeed_;
      protoName_ = other.protoName_;
      remoteCountry_ = other.remoteCountry_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlowMessage Clone() {
      return new FlowMessage(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Flowmessageenriched.FlowMessage.Types.FlowType type_ = global::Flowmessageenriched.FlowMessage.Types.FlowType.Flowunknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Flowmessageenriched.FlowMessage.Types.FlowType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "TimeReceived" field.</summary>
    public const int TimeReceivedFieldNumber = 2;
    private ulong timeReceived_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeReceived {
      get { return timeReceived_; }
      set {
        timeReceived_ = value;
      }
    }

    /// <summary>Field number for the "SequenceNum" field.</summary>
    public const int SequenceNumFieldNumber = 4;
    private uint sequenceNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SequenceNum {
      get { return sequenceNum_; }
      set {
        sequenceNum_ = value;
      }
    }

    /// <summary>Field number for the "SamplingRate" field.</summary>
    public const int SamplingRateFieldNumber = 3;
    private ulong samplingRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SamplingRate {
      get { return samplingRate_; }
      set {
        samplingRate_ = value;
      }
    }

    /// <summary>Field number for the "FlowDirection" field.</summary>
    public const int FlowDirectionFieldNumber = 42;
    private uint flowDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FlowDirection {
      get { return flowDirection_; }
      set {
        flowDirection_ = value;
      }
    }

    /// <summary>Field number for the "SamplerAddress" field.</summary>
    public const int SamplerAddressFieldNumber = 11;
    private pb::ByteString samplerAddress_ = pb::ByteString.Empty;
    /// <summary>
    /// Sampler information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SamplerAddress {
      get { return samplerAddress_; }
      set {
        samplerAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TimeFlowStart" field.</summary>
    public const int TimeFlowStartFieldNumber = 38;
    private ulong timeFlowStart_;
    /// <summary>
    /// Found inside packet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeFlowStart {
      get { return timeFlowStart_; }
      set {
        timeFlowStart_ = value;
      }
    }

    /// <summary>Field number for the "TimeFlowEnd" field.</summary>
    public const int TimeFlowEndFieldNumber = 5;
    private ulong timeFlowEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeFlowEnd {
      get { return timeFlowEnd_; }
      set {
        timeFlowEnd_ = value;
      }
    }

    /// <summary>Field number for the "Bytes" field.</summary>
    public const int BytesFieldNumber = 9;
    private ulong bytes_;
    /// <summary>
    /// Size of the sampled packet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Bytes {
      get { return bytes_; }
      set {
        bytes_ = value;
      }
    }

    /// <summary>Field number for the "Packets" field.</summary>
    public const int PacketsFieldNumber = 10;
    private ulong packets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Packets {
      get { return packets_; }
      set {
        packets_ = value;
      }
    }

    /// <summary>Field number for the "SrcAddr" field.</summary>
    public const int SrcAddrFieldNumber = 6;
    private pb::ByteString srcAddr_ = pb::ByteString.Empty;
    /// <summary>
    /// Source/destination addresses
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SrcAddr {
      get { return srcAddr_; }
      set {
        srcAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DstAddr" field.</summary>
    public const int DstAddrFieldNumber = 7;
    private pb::ByteString dstAddr_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DstAddr {
      get { return dstAddr_; }
      set {
        dstAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Etype" field.</summary>
    public const int EtypeFieldNumber = 30;
    private uint etype_;
    /// <summary>
    /// Layer 3 protocol (IPv4/IPv6/ARP/MPLS...)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Etype {
      get { return etype_; }
      set {
        etype_ = value;
      }
    }

    /// <summary>Field number for the "Proto" field.</summary>
    public const int ProtoFieldNumber = 20;
    private uint proto_;
    /// <summary>
    /// Layer 4 protocol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Proto {
      get { return proto_; }
      set {
        proto_ = value;
      }
    }

    /// <summary>Field number for the "SrcPort" field.</summary>
    public const int SrcPortFieldNumber = 21;
    private uint srcPort_;
    /// <summary>
    /// Ports for UDP and TCP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcPort {
      get { return srcPort_; }
      set {
        srcPort_ = value;
      }
    }

    /// <summary>Field number for the "DstPort" field.</summary>
    public const int DstPortFieldNumber = 22;
    private uint dstPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DstPort {
      get { return dstPort_; }
      set {
        dstPort_ = value;
      }
    }

    /// <summary>Field number for the "InIf" field.</summary>
    public const int InIfFieldNumber = 18;
    private uint inIf_;
    /// <summary>
    /// Interfaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InIf {
      get { return inIf_; }
      set {
        inIf_ = value;
      }
    }

    /// <summary>Field number for the "OutIf" field.</summary>
    public const int OutIfFieldNumber = 19;
    private uint outIf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OutIf {
      get { return outIf_; }
      set {
        outIf_ = value;
      }
    }

    /// <summary>Field number for the "SrcMac" field.</summary>
    public const int SrcMacFieldNumber = 27;
    private ulong srcMac_;
    /// <summary>
    /// Ethernet information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SrcMac {
      get { return srcMac_; }
      set {
        srcMac_ = value;
      }
    }

    /// <summary>Field number for the "DstMac" field.</summary>
    public const int DstMacFieldNumber = 28;
    private ulong dstMac_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DstMac {
      get { return dstMac_; }
      set {
        dstMac_ = value;
      }
    }

    /// <summary>Field number for the "SrcVlan" field.</summary>
    public const int SrcVlanFieldNumber = 33;
    private uint srcVlan_;
    /// <summary>
    /// Vlan
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcVlan {
      get { return srcVlan_; }
      set {
        srcVlan_ = value;
      }
    }

    /// <summary>Field number for the "DstVlan" field.</summary>
    public const int DstVlanFieldNumber = 34;
    private uint dstVlan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DstVlan {
      get { return dstVlan_; }
      set {
        dstVlan_ = value;
      }
    }

    /// <summary>Field number for the "VlanId" field.</summary>
    public const int VlanIdFieldNumber = 29;
    private uint vlanId_;
    /// <summary>
    /// 802.1q VLAN in sampled packet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VlanId {
      get { return vlanId_; }
      set {
        vlanId_ = value;
      }
    }

    /// <summary>Field number for the "IngressVrfID" field.</summary>
    public const int IngressVrfIDFieldNumber = 39;
    private uint ingressVrfID_;
    /// <summary>
    /// VRF
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IngressVrfID {
      get { return ingressVrfID_; }
      set {
        ingressVrfID_ = value;
      }
    }

    /// <summary>Field number for the "EgressVrfID" field.</summary>
    public const int EgressVrfIDFieldNumber = 40;
    private uint egressVrfID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EgressVrfID {
      get { return egressVrfID_; }
      set {
        egressVrfID_ = value;
      }
    }

    /// <summary>Field number for the "IPTos" field.</summary>
    public const int IPTosFieldNumber = 23;
    private uint iPTos_;
    /// <summary>
    /// IP and TCP special flags
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IPTos {
      get { return iPTos_; }
      set {
        iPTos_ = value;
      }
    }

    /// <summary>Field number for the "ForwardingStatus" field.</summary>
    public const int ForwardingStatusFieldNumber = 24;
    private uint forwardingStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ForwardingStatus {
      get { return forwardingStatus_; }
      set {
        forwardingStatus_ = value;
      }
    }

    /// <summary>Field number for the "IPTTL" field.</summary>
    public const int IPTTLFieldNumber = 25;
    private uint iPTTL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IPTTL {
      get { return iPTTL_; }
      set {
        iPTTL_ = value;
      }
    }

    /// <summary>Field number for the "TCPFlags" field.</summary>
    public const int TCPFlagsFieldNumber = 26;
    private uint tCPFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TCPFlags {
      get { return tCPFlags_; }
      set {
        tCPFlags_ = value;
      }
    }

    /// <summary>Field number for the "IcmpType" field.</summary>
    public const int IcmpTypeFieldNumber = 31;
    private uint icmpType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpType {
      get { return icmpType_; }
      set {
        icmpType_ = value;
      }
    }

    /// <summary>Field number for the "IcmpCode" field.</summary>
    public const int IcmpCodeFieldNumber = 32;
    private uint icmpCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IcmpCode {
      get { return icmpCode_; }
      set {
        icmpCode_ = value;
      }
    }

    /// <summary>Field number for the "IPv6FlowLabel" field.</summary>
    public const int IPv6FlowLabelFieldNumber = 37;
    private uint iPv6FlowLabel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IPv6FlowLabel {
      get { return iPv6FlowLabel_; }
      set {
        iPv6FlowLabel_ = value;
      }
    }

    /// <summary>Field number for the "FragmentId" field.</summary>
    public const int FragmentIdFieldNumber = 35;
    private uint fragmentId_;
    /// <summary>
    /// Fragments (IPv4/IPv6)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FragmentId {
      get { return fragmentId_; }
      set {
        fragmentId_ = value;
      }
    }

    /// <summary>Field number for the "FragmentOffset" field.</summary>
    public const int FragmentOffsetFieldNumber = 36;
    private uint fragmentOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FragmentOffset {
      get { return fragmentOffset_; }
      set {
        fragmentOffset_ = value;
      }
    }

    /// <summary>Field number for the "BiFlowDirection" field.</summary>
    public const int BiFlowDirectionFieldNumber = 41;
    private uint biFlowDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BiFlowDirection {
      get { return biFlowDirection_; }
      set {
        biFlowDirection_ = value;
      }
    }

    /// <summary>Field number for the "SrcAS" field.</summary>
    public const int SrcASFieldNumber = 14;
    private uint srcAS_;
    /// <summary>
    /// Autonomous system information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcAS {
      get { return srcAS_; }
      set {
        srcAS_ = value;
      }
    }

    /// <summary>Field number for the "DstAS" field.</summary>
    public const int DstASFieldNumber = 15;
    private uint dstAS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DstAS {
      get { return dstAS_; }
      set {
        dstAS_ = value;
      }
    }

    /// <summary>Field number for the "NextHop" field.</summary>
    public const int NextHopFieldNumber = 12;
    private pb::ByteString nextHop_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NextHop {
      get { return nextHop_; }
      set {
        nextHop_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NextHopAS" field.</summary>
    public const int NextHopASFieldNumber = 13;
    private uint nextHopAS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextHopAS {
      get { return nextHopAS_; }
      set {
        nextHopAS_ = value;
      }
    }

    /// <summary>Field number for the "SrcNet" field.</summary>
    public const int SrcNetFieldNumber = 16;
    private uint srcNet_;
    /// <summary>
    /// Prefix size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcNet {
      get { return srcNet_; }
      set {
        srcNet_ = value;
      }
    }

    /// <summary>Field number for the "DstNet" field.</summary>
    public const int DstNetFieldNumber = 17;
    private uint dstNet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DstNet {
      get { return dstNet_; }
      set {
        dstNet_ = value;
      }
    }

    /// <summary>Field number for the "HasEncap" field.</summary>
    public const int HasEncapFieldNumber = 43;
    private bool hasEncap_;
    /// <summary>
    /// IP encapsulation information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEncap {
      get { return hasEncap_; }
      set {
        hasEncap_ = value;
      }
    }

    /// <summary>Field number for the "SrcAddrEncap" field.</summary>
    public const int SrcAddrEncapFieldNumber = 44;
    private pb::ByteString srcAddrEncap_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SrcAddrEncap {
      get { return srcAddrEncap_; }
      set {
        srcAddrEncap_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DstAddrEncap" field.</summary>
    public const int DstAddrEncapFieldNumber = 45;
    private pb::ByteString dstAddrEncap_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DstAddrEncap {
      get { return dstAddrEncap_; }
      set {
        dstAddrEncap_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ProtoEncap" field.</summary>
    public const int ProtoEncapFieldNumber = 46;
    private uint protoEncap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ProtoEncap {
      get { return protoEncap_; }
      set {
        protoEncap_ = value;
      }
    }

    /// <summary>Field number for the "EtypeEncap" field.</summary>
    public const int EtypeEncapFieldNumber = 47;
    private uint etypeEncap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EtypeEncap {
      get { return etypeEncap_; }
      set {
        etypeEncap_ = value;
      }
    }

    /// <summary>Field number for the "IPTosEncap" field.</summary>
    public const int IPTosEncapFieldNumber = 48;
    private uint iPTosEncap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IPTosEncap {
      get { return iPTosEncap_; }
      set {
        iPTosEncap_ = value;
      }
    }

    /// <summary>Field number for the "IPTTLEncap" field.</summary>
    public const int IPTTLEncapFieldNumber = 49;
    private uint iPTTLEncap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IPTTLEncap {
      get { return iPTTLEncap_; }
      set {
        iPTTLEncap_ = value;
      }
    }

    /// <summary>Field number for the "IPv6FlowLabelEncap" field.</summary>
    public const int IPv6FlowLabelEncapFieldNumber = 50;
    private uint iPv6FlowLabelEncap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IPv6FlowLabelEncap {
      get { return iPv6FlowLabelEncap_; }
      set {
        iPv6FlowLabelEncap_ = value;
      }
    }

    /// <summary>Field number for the "FragmentIdEncap" field.</summary>
    public const int FragmentIdEncapFieldNumber = 51;
    private uint fragmentIdEncap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FragmentIdEncap {
      get { return fragmentIdEncap_; }
      set {
        fragmentIdEncap_ = value;
      }
    }

    /// <summary>Field number for the "FragmentOffsetEncap" field.</summary>
    public const int FragmentOffsetEncapFieldNumber = 52;
    private uint fragmentOffsetEncap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FragmentOffsetEncap {
      get { return fragmentOffsetEncap_; }
      set {
        fragmentOffsetEncap_ = value;
      }
    }

    /// <summary>Field number for the "HasMPLS" field.</summary>
    public const int HasMPLSFieldNumber = 53;
    private bool hasMPLS_;
    /// <summary>
    /// MPLS information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMPLS {
      get { return hasMPLS_; }
      set {
        hasMPLS_ = value;
      }
    }

    /// <summary>Field number for the "MPLSCount" field.</summary>
    public const int MPLSCountFieldNumber = 54;
    private uint mPLSCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MPLSCount {
      get { return mPLSCount_; }
      set {
        mPLSCount_ = value;
      }
    }

    /// <summary>Field number for the "MPLS1TTL" field.</summary>
    public const int MPLS1TTLFieldNumber = 55;
    private uint mPLS1TTL_;
    /// <summary>
    /// First TTL
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MPLS1TTL {
      get { return mPLS1TTL_; }
      set {
        mPLS1TTL_ = value;
      }
    }

    /// <summary>Field number for the "MPLS1Label" field.</summary>
    public const int MPLS1LabelFieldNumber = 56;
    private uint mPLS1Label_;
    /// <summary>
    /// First Label
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MPLS1Label {
      get { return mPLS1Label_; }
      set {
        mPLS1Label_ = value;
      }
    }

    /// <summary>Field number for the "MPLS2TTL" field.</summary>
    public const int MPLS2TTLFieldNumber = 57;
    private uint mPLS2TTL_;
    /// <summary>
    /// Second TTL
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MPLS2TTL {
      get { return mPLS2TTL_; }
      set {
        mPLS2TTL_ = value;
      }
    }

    /// <summary>Field number for the "MPLS2Label" field.</summary>
    public const int MPLS2LabelFieldNumber = 58;
    private uint mPLS2Label_;
    /// <summary>
    /// Second Label
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MPLS2Label {
      get { return mPLS2Label_; }
      set {
        mPLS2Label_ = value;
      }
    }

    /// <summary>Field number for the "MPLS3TTL" field.</summary>
    public const int MPLS3TTLFieldNumber = 59;
    private uint mPLS3TTL_;
    /// <summary>
    /// Third TTL
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MPLS3TTL {
      get { return mPLS3TTL_; }
      set {
        mPLS3TTL_ = value;
      }
    }

    /// <summary>Field number for the "MPLS3Label" field.</summary>
    public const int MPLS3LabelFieldNumber = 60;
    private uint mPLS3Label_;
    /// <summary>
    /// Third Label
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MPLS3Label {
      get { return mPLS3Label_; }
      set {
        mPLS3Label_ = value;
      }
    }

    /// <summary>Field number for the "MPLSLastTTL" field.</summary>
    public const int MPLSLastTTLFieldNumber = 61;
    private uint mPLSLastTTL_;
    /// <summary>
    /// Last TTL
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MPLSLastTTL {
      get { return mPLSLastTTL_; }
      set {
        mPLSLastTTL_ = value;
      }
    }

    /// <summary>Field number for the "MPLSLastLabel" field.</summary>
    public const int MPLSLastLabelFieldNumber = 62;
    private uint mPLSLastLabel_;
    /// <summary>
    /// Last Label
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MPLSLastLabel {
      get { return mPLSLastLabel_; }
      set {
        mPLSLastLabel_ = value;
      }
    }

    /// <summary>Field number for the "HasPPP" field.</summary>
    public const int HasPPPFieldNumber = 63;
    private bool hasPPP_;
    /// <summary>
    /// PPP information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPPP {
      get { return hasPPP_; }
      set {
        hasPPP_ = value;
      }
    }

    /// <summary>Field number for the "PPPAddressControl" field.</summary>
    public const int PPPAddressControlFieldNumber = 64;
    private uint pPPAddressControl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PPPAddressControl {
      get { return pPPAddressControl_; }
      set {
        pPPAddressControl_ = value;
      }
    }

    /// <summary>Field number for the "Cid" field.</summary>
    public const int CidFieldNumber = 1000;
    private uint cid_;
    /// <summary>
    /// bwNetFlow enricher fields
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cid {
      get { return cid_; }
      set {
        cid_ = value;
      }
    }

    /// <summary>Field number for the "CidString" field.</summary>
    public const int CidStringFieldNumber = 1001;
    private string cidString_ = "";
    /// <summary>
    /// Customer ID - a more generalized ID, assigned by prefix
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CidString {
      get { return cidString_; }
      set {
        cidString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Normalized" field.</summary>
    public const int NormalizedFieldNumber = 1002;
    private global::Flowmessageenriched.FlowMessage.Types.NormalizedType normalized_ = global::Flowmessageenriched.FlowMessage.Types.NormalizedType.No;
    /// <summary>
    /// Normalization - whether the sampling rate is accounted for
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Flowmessageenriched.FlowMessage.Types.NormalizedType Normalized {
      get { return normalized_; }
      set {
        normalized_ = value;
      }
    }

    /// <summary>Field number for the "SrcIfName" field.</summary>
    public const int SrcIfNameFieldNumber = 1003;
    private string srcIfName_ = "";
    /// <summary>
    /// Fields for Interface Usability -- enriched using SNMP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SrcIfName {
      get { return srcIfName_; }
      set {
        srcIfName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SrcIfDesc" field.</summary>
    public const int SrcIfDescFieldNumber = 1004;
    private string srcIfDesc_ = "";
    /// <summary>
    /// set to the descrition, filtered by a regex in the enricher
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SrcIfDesc {
      get { return srcIfDesc_; }
      set {
        srcIfDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SrcIfSpeed" field.</summary>
    public const int SrcIfSpeedFieldNumber = 1005;
    private uint srcIfSpeed_;
    /// <summary>
    /// iface speed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcIfSpeed {
      get { return srcIfSpeed_; }
      set {
        srcIfSpeed_ = value;
      }
    }

    /// <summary>Field number for the "DstIfName" field.</summary>
    public const int DstIfNameFieldNumber = 1006;
    private string dstIfName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DstIfName {
      get { return dstIfName_; }
      set {
        dstIfName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DstIfDesc" field.</summary>
    public const int DstIfDescFieldNumber = 1007;
    private string dstIfDesc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DstIfDesc {
      get { return dstIfDesc_; }
      set {
        dstIfDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DstIfSpeed" field.</summary>
    public const int DstIfSpeedFieldNumber = 1008;
    private uint dstIfSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DstIfSpeed {
      get { return dstIfSpeed_; }
      set {
        dstIfSpeed_ = value;
      }
    }

    /// <summary>Field number for the "ProtoName" field.</summary>
    public const int ProtoNameFieldNumber = 1009;
    private string protoName_ = "";
    /// <summary>
    /// Protocol Name -- set for some well known protocols, based on Proto
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProtoName {
      get { return protoName_; }
      set {
        protoName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RemoteCountry" field.</summary>
    public const int RemoteCountryFieldNumber = 1010;
    private string remoteCountry_ = "";
    /// <summary>
    /// Geolocation -- set using the provided database
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemoteCountry {
      get { return remoteCountry_; }
      set {
        remoteCountry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlowMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlowMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (TimeReceived != other.TimeReceived) return false;
      if (SequenceNum != other.SequenceNum) return false;
      if (SamplingRate != other.SamplingRate) return false;
      if (FlowDirection != other.FlowDirection) return false;
      if (SamplerAddress != other.SamplerAddress) return false;
      if (TimeFlowStart != other.TimeFlowStart) return false;
      if (TimeFlowEnd != other.TimeFlowEnd) return false;
      if (Bytes != other.Bytes) return false;
      if (Packets != other.Packets) return false;
      if (SrcAddr != other.SrcAddr) return false;
      if (DstAddr != other.DstAddr) return false;
      if (Etype != other.Etype) return false;
      if (Proto != other.Proto) return false;
      if (SrcPort != other.SrcPort) return false;
      if (DstPort != other.DstPort) return false;
      if (InIf != other.InIf) return false;
      if (OutIf != other.OutIf) return false;
      if (SrcMac != other.SrcMac) return false;
      if (DstMac != other.DstMac) return false;
      if (SrcVlan != other.SrcVlan) return false;
      if (DstVlan != other.DstVlan) return false;
      if (VlanId != other.VlanId) return false;
      if (IngressVrfID != other.IngressVrfID) return false;
      if (EgressVrfID != other.EgressVrfID) return false;
      if (IPTos != other.IPTos) return false;
      if (ForwardingStatus != other.ForwardingStatus) return false;
      if (IPTTL != other.IPTTL) return false;
      if (TCPFlags != other.TCPFlags) return false;
      if (IcmpType != other.IcmpType) return false;
      if (IcmpCode != other.IcmpCode) return false;
      if (IPv6FlowLabel != other.IPv6FlowLabel) return false;
      if (FragmentId != other.FragmentId) return false;
      if (FragmentOffset != other.FragmentOffset) return false;
      if (BiFlowDirection != other.BiFlowDirection) return false;
      if (SrcAS != other.SrcAS) return false;
      if (DstAS != other.DstAS) return false;
      if (NextHop != other.NextHop) return false;
      if (NextHopAS != other.NextHopAS) return false;
      if (SrcNet != other.SrcNet) return false;
      if (DstNet != other.DstNet) return false;
      if (HasEncap != other.HasEncap) return false;
      if (SrcAddrEncap != other.SrcAddrEncap) return false;
      if (DstAddrEncap != other.DstAddrEncap) return false;
      if (ProtoEncap != other.ProtoEncap) return false;
      if (EtypeEncap != other.EtypeEncap) return false;
      if (IPTosEncap != other.IPTosEncap) return false;
      if (IPTTLEncap != other.IPTTLEncap) return false;
      if (IPv6FlowLabelEncap != other.IPv6FlowLabelEncap) return false;
      if (FragmentIdEncap != other.FragmentIdEncap) return false;
      if (FragmentOffsetEncap != other.FragmentOffsetEncap) return false;
      if (HasMPLS != other.HasMPLS) return false;
      if (MPLSCount != other.MPLSCount) return false;
      if (MPLS1TTL != other.MPLS1TTL) return false;
      if (MPLS1Label != other.MPLS1Label) return false;
      if (MPLS2TTL != other.MPLS2TTL) return false;
      if (MPLS2Label != other.MPLS2Label) return false;
      if (MPLS3TTL != other.MPLS3TTL) return false;
      if (MPLS3Label != other.MPLS3Label) return false;
      if (MPLSLastTTL != other.MPLSLastTTL) return false;
      if (MPLSLastLabel != other.MPLSLastLabel) return false;
      if (HasPPP != other.HasPPP) return false;
      if (PPPAddressControl != other.PPPAddressControl) return false;
      if (Cid != other.Cid) return false;
      if (CidString != other.CidString) return false;
      if (Normalized != other.Normalized) return false;
      if (SrcIfName != other.SrcIfName) return false;
      if (SrcIfDesc != other.SrcIfDesc) return false;
      if (SrcIfSpeed != other.SrcIfSpeed) return false;
      if (DstIfName != other.DstIfName) return false;
      if (DstIfDesc != other.DstIfDesc) return false;
      if (DstIfSpeed != other.DstIfSpeed) return false;
      if (ProtoName != other.ProtoName) return false;
      if (RemoteCountry != other.RemoteCountry) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Flowmessageenriched.FlowMessage.Types.FlowType.Flowunknown) hash ^= Type.GetHashCode();
      if (TimeReceived != 0UL) hash ^= TimeReceived.GetHashCode();
      if (SequenceNum != 0) hash ^= SequenceNum.GetHashCode();
      if (SamplingRate != 0UL) hash ^= SamplingRate.GetHashCode();
      if (FlowDirection != 0) hash ^= FlowDirection.GetHashCode();
      if (SamplerAddress.Length != 0) hash ^= SamplerAddress.GetHashCode();
      if (TimeFlowStart != 0UL) hash ^= TimeFlowStart.GetHashCode();
      if (TimeFlowEnd != 0UL) hash ^= TimeFlowEnd.GetHashCode();
      if (Bytes != 0UL) hash ^= Bytes.GetHashCode();
      if (Packets != 0UL) hash ^= Packets.GetHashCode();
      if (SrcAddr.Length != 0) hash ^= SrcAddr.GetHashCode();
      if (DstAddr.Length != 0) hash ^= DstAddr.GetHashCode();
      if (Etype != 0) hash ^= Etype.GetHashCode();
      if (Proto != 0) hash ^= Proto.GetHashCode();
      if (SrcPort != 0) hash ^= SrcPort.GetHashCode();
      if (DstPort != 0) hash ^= DstPort.GetHashCode();
      if (InIf != 0) hash ^= InIf.GetHashCode();
      if (OutIf != 0) hash ^= OutIf.GetHashCode();
      if (SrcMac != 0UL) hash ^= SrcMac.GetHashCode();
      if (DstMac != 0UL) hash ^= DstMac.GetHashCode();
      if (SrcVlan != 0) hash ^= SrcVlan.GetHashCode();
      if (DstVlan != 0) hash ^= DstVlan.GetHashCode();
      if (VlanId != 0) hash ^= VlanId.GetHashCode();
      if (IngressVrfID != 0) hash ^= IngressVrfID.GetHashCode();
      if (EgressVrfID != 0) hash ^= EgressVrfID.GetHashCode();
      if (IPTos != 0) hash ^= IPTos.GetHashCode();
      if (ForwardingStatus != 0) hash ^= ForwardingStatus.GetHashCode();
      if (IPTTL != 0) hash ^= IPTTL.GetHashCode();
      if (TCPFlags != 0) hash ^= TCPFlags.GetHashCode();
      if (IcmpType != 0) hash ^= IcmpType.GetHashCode();
      if (IcmpCode != 0) hash ^= IcmpCode.GetHashCode();
      if (IPv6FlowLabel != 0) hash ^= IPv6FlowLabel.GetHashCode();
      if (FragmentId != 0) hash ^= FragmentId.GetHashCode();
      if (FragmentOffset != 0) hash ^= FragmentOffset.GetHashCode();
      if (BiFlowDirection != 0) hash ^= BiFlowDirection.GetHashCode();
      if (SrcAS != 0) hash ^= SrcAS.GetHashCode();
      if (DstAS != 0) hash ^= DstAS.GetHashCode();
      if (NextHop.Length != 0) hash ^= NextHop.GetHashCode();
      if (NextHopAS != 0) hash ^= NextHopAS.GetHashCode();
      if (SrcNet != 0) hash ^= SrcNet.GetHashCode();
      if (DstNet != 0) hash ^= DstNet.GetHashCode();
      if (HasEncap != false) hash ^= HasEncap.GetHashCode();
      if (SrcAddrEncap.Length != 0) hash ^= SrcAddrEncap.GetHashCode();
      if (DstAddrEncap.Length != 0) hash ^= DstAddrEncap.GetHashCode();
      if (ProtoEncap != 0) hash ^= ProtoEncap.GetHashCode();
      if (EtypeEncap != 0) hash ^= EtypeEncap.GetHashCode();
      if (IPTosEncap != 0) hash ^= IPTosEncap.GetHashCode();
      if (IPTTLEncap != 0) hash ^= IPTTLEncap.GetHashCode();
      if (IPv6FlowLabelEncap != 0) hash ^= IPv6FlowLabelEncap.GetHashCode();
      if (FragmentIdEncap != 0) hash ^= FragmentIdEncap.GetHashCode();
      if (FragmentOffsetEncap != 0) hash ^= FragmentOffsetEncap.GetHashCode();
      if (HasMPLS != false) hash ^= HasMPLS.GetHashCode();
      if (MPLSCount != 0) hash ^= MPLSCount.GetHashCode();
      if (MPLS1TTL != 0) hash ^= MPLS1TTL.GetHashCode();
      if (MPLS1Label != 0) hash ^= MPLS1Label.GetHashCode();
      if (MPLS2TTL != 0) hash ^= MPLS2TTL.GetHashCode();
      if (MPLS2Label != 0) hash ^= MPLS2Label.GetHashCode();
      if (MPLS3TTL != 0) hash ^= MPLS3TTL.GetHashCode();
      if (MPLS3Label != 0) hash ^= MPLS3Label.GetHashCode();
      if (MPLSLastTTL != 0) hash ^= MPLSLastTTL.GetHashCode();
      if (MPLSLastLabel != 0) hash ^= MPLSLastLabel.GetHashCode();
      if (HasPPP != false) hash ^= HasPPP.GetHashCode();
      if (PPPAddressControl != 0) hash ^= PPPAddressControl.GetHashCode();
      if (Cid != 0) hash ^= Cid.GetHashCode();
      if (CidString.Length != 0) hash ^= CidString.GetHashCode();
      if (Normalized != global::Flowmessageenriched.FlowMessage.Types.NormalizedType.No) hash ^= Normalized.GetHashCode();
      if (SrcIfName.Length != 0) hash ^= SrcIfName.GetHashCode();
      if (SrcIfDesc.Length != 0) hash ^= SrcIfDesc.GetHashCode();
      if (SrcIfSpeed != 0) hash ^= SrcIfSpeed.GetHashCode();
      if (DstIfName.Length != 0) hash ^= DstIfName.GetHashCode();
      if (DstIfDesc.Length != 0) hash ^= DstIfDesc.GetHashCode();
      if (DstIfSpeed != 0) hash ^= DstIfSpeed.GetHashCode();
      if (ProtoName.Length != 0) hash ^= ProtoName.GetHashCode();
      if (RemoteCountry.Length != 0) hash ^= RemoteCountry.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Flowmessageenriched.FlowMessage.Types.FlowType.Flowunknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (TimeReceived != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TimeReceived);
      }
      if (SamplingRate != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SamplingRate);
      }
      if (SequenceNum != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SequenceNum);
      }
      if (TimeFlowEnd != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TimeFlowEnd);
      }
      if (SrcAddr.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(SrcAddr);
      }
      if (DstAddr.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(DstAddr);
      }
      if (Bytes != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(Bytes);
      }
      if (Packets != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(Packets);
      }
      if (SamplerAddress.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(SamplerAddress);
      }
      if (NextHop.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(NextHop);
      }
      if (NextHopAS != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(NextHopAS);
      }
      if (SrcAS != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(SrcAS);
      }
      if (DstAS != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(DstAS);
      }
      if (SrcNet != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(SrcNet);
      }
      if (DstNet != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(DstNet);
      }
      if (InIf != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(InIf);
      }
      if (OutIf != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(OutIf);
      }
      if (Proto != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Proto);
      }
      if (SrcPort != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(SrcPort);
      }
      if (DstPort != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(DstPort);
      }
      if (IPTos != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(IPTos);
      }
      if (ForwardingStatus != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(ForwardingStatus);
      }
      if (IPTTL != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(IPTTL);
      }
      if (TCPFlags != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(TCPFlags);
      }
      if (SrcMac != 0UL) {
        output.WriteRawTag(216, 1);
        output.WriteUInt64(SrcMac);
      }
      if (DstMac != 0UL) {
        output.WriteRawTag(224, 1);
        output.WriteUInt64(DstMac);
      }
      if (VlanId != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(VlanId);
      }
      if (Etype != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(Etype);
      }
      if (IcmpType != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(IcmpType);
      }
      if (IcmpCode != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(IcmpCode);
      }
      if (SrcVlan != 0) {
        output.WriteRawTag(136, 2);
        output.WriteUInt32(SrcVlan);
      }
      if (DstVlan != 0) {
        output.WriteRawTag(144, 2);
        output.WriteUInt32(DstVlan);
      }
      if (FragmentId != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(FragmentId);
      }
      if (FragmentOffset != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(FragmentOffset);
      }
      if (IPv6FlowLabel != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(IPv6FlowLabel);
      }
      if (TimeFlowStart != 0UL) {
        output.WriteRawTag(176, 2);
        output.WriteUInt64(TimeFlowStart);
      }
      if (IngressVrfID != 0) {
        output.WriteRawTag(184, 2);
        output.WriteUInt32(IngressVrfID);
      }
      if (EgressVrfID != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(EgressVrfID);
      }
      if (BiFlowDirection != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(BiFlowDirection);
      }
      if (FlowDirection != 0) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(FlowDirection);
      }
      if (HasEncap != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(HasEncap);
      }
      if (SrcAddrEncap.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteBytes(SrcAddrEncap);
      }
      if (DstAddrEncap.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteBytes(DstAddrEncap);
      }
      if (ProtoEncap != 0) {
        output.WriteRawTag(240, 2);
        output.WriteUInt32(ProtoEncap);
      }
      if (EtypeEncap != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(EtypeEncap);
      }
      if (IPTosEncap != 0) {
        output.WriteRawTag(128, 3);
        output.WriteUInt32(IPTosEncap);
      }
      if (IPTTLEncap != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(IPTTLEncap);
      }
      if (IPv6FlowLabelEncap != 0) {
        output.WriteRawTag(144, 3);
        output.WriteUInt32(IPv6FlowLabelEncap);
      }
      if (FragmentIdEncap != 0) {
        output.WriteRawTag(152, 3);
        output.WriteUInt32(FragmentIdEncap);
      }
      if (FragmentOffsetEncap != 0) {
        output.WriteRawTag(160, 3);
        output.WriteUInt32(FragmentOffsetEncap);
      }
      if (HasMPLS != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(HasMPLS);
      }
      if (MPLSCount != 0) {
        output.WriteRawTag(176, 3);
        output.WriteUInt32(MPLSCount);
      }
      if (MPLS1TTL != 0) {
        output.WriteRawTag(184, 3);
        output.WriteUInt32(MPLS1TTL);
      }
      if (MPLS1Label != 0) {
        output.WriteRawTag(192, 3);
        output.WriteUInt32(MPLS1Label);
      }
      if (MPLS2TTL != 0) {
        output.WriteRawTag(200, 3);
        output.WriteUInt32(MPLS2TTL);
      }
      if (MPLS2Label != 0) {
        output.WriteRawTag(208, 3);
        output.WriteUInt32(MPLS2Label);
      }
      if (MPLS3TTL != 0) {
        output.WriteRawTag(216, 3);
        output.WriteUInt32(MPLS3TTL);
      }
      if (MPLS3Label != 0) {
        output.WriteRawTag(224, 3);
        output.WriteUInt32(MPLS3Label);
      }
      if (MPLSLastTTL != 0) {
        output.WriteRawTag(232, 3);
        output.WriteUInt32(MPLSLastTTL);
      }
      if (MPLSLastLabel != 0) {
        output.WriteRawTag(240, 3);
        output.WriteUInt32(MPLSLastLabel);
      }
      if (HasPPP != false) {
        output.WriteRawTag(248, 3);
        output.WriteBool(HasPPP);
      }
      if (PPPAddressControl != 0) {
        output.WriteRawTag(128, 4);
        output.WriteUInt32(PPPAddressControl);
      }
      if (Cid != 0) {
        output.WriteRawTag(192, 62);
        output.WriteUInt32(Cid);
      }
      if (CidString.Length != 0) {
        output.WriteRawTag(202, 62);
        output.WriteString(CidString);
      }
      if (Normalized != global::Flowmessageenriched.FlowMessage.Types.NormalizedType.No) {
        output.WriteRawTag(208, 62);
        output.WriteEnum((int) Normalized);
      }
      if (SrcIfName.Length != 0) {
        output.WriteRawTag(218, 62);
        output.WriteString(SrcIfName);
      }
      if (SrcIfDesc.Length != 0) {
        output.WriteRawTag(226, 62);
        output.WriteString(SrcIfDesc);
      }
      if (SrcIfSpeed != 0) {
        output.WriteRawTag(232, 62);
        output.WriteUInt32(SrcIfSpeed);
      }
      if (DstIfName.Length != 0) {
        output.WriteRawTag(242, 62);
        output.WriteString(DstIfName);
      }
      if (DstIfDesc.Length != 0) {
        output.WriteRawTag(250, 62);
        output.WriteString(DstIfDesc);
      }
      if (DstIfSpeed != 0) {
        output.WriteRawTag(128, 63);
        output.WriteUInt32(DstIfSpeed);
      }
      if (ProtoName.Length != 0) {
        output.WriteRawTag(138, 63);
        output.WriteString(ProtoName);
      }
      if (RemoteCountry.Length != 0) {
        output.WriteRawTag(146, 63);
        output.WriteString(RemoteCountry);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Flowmessageenriched.FlowMessage.Types.FlowType.Flowunknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (TimeReceived != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeReceived);
      }
      if (SequenceNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SequenceNum);
      }
      if (SamplingRate != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SamplingRate);
      }
      if (FlowDirection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FlowDirection);
      }
      if (SamplerAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SamplerAddress);
      }
      if (TimeFlowStart != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TimeFlowStart);
      }
      if (TimeFlowEnd != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeFlowEnd);
      }
      if (Bytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bytes);
      }
      if (Packets != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Packets);
      }
      if (SrcAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SrcAddr);
      }
      if (DstAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DstAddr);
      }
      if (Etype != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Etype);
      }
      if (Proto != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Proto);
      }
      if (SrcPort != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SrcPort);
      }
      if (DstPort != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DstPort);
      }
      if (InIf != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(InIf);
      }
      if (OutIf != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(OutIf);
      }
      if (SrcMac != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(SrcMac);
      }
      if (DstMac != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(DstMac);
      }
      if (SrcVlan != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SrcVlan);
      }
      if (DstVlan != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DstVlan);
      }
      if (VlanId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(VlanId);
      }
      if (IngressVrfID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IngressVrfID);
      }
      if (EgressVrfID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EgressVrfID);
      }
      if (IPTos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IPTos);
      }
      if (ForwardingStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ForwardingStatus);
      }
      if (IPTTL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IPTTL);
      }
      if (TCPFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TCPFlags);
      }
      if (IcmpType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpType);
      }
      if (IcmpCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IcmpCode);
      }
      if (IPv6FlowLabel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IPv6FlowLabel);
      }
      if (FragmentId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FragmentId);
      }
      if (FragmentOffset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FragmentOffset);
      }
      if (BiFlowDirection != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BiFlowDirection);
      }
      if (SrcAS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrcAS);
      }
      if (DstAS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DstAS);
      }
      if (NextHop.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NextHop);
      }
      if (NextHopAS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextHopAS);
      }
      if (SrcNet != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SrcNet);
      }
      if (DstNet != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DstNet);
      }
      if (HasEncap != false) {
        size += 2 + 1;
      }
      if (SrcAddrEncap.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(SrcAddrEncap);
      }
      if (DstAddrEncap.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(DstAddrEncap);
      }
      if (ProtoEncap != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ProtoEncap);
      }
      if (EtypeEncap != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EtypeEncap);
      }
      if (IPTosEncap != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IPTosEncap);
      }
      if (IPTTLEncap != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IPTTLEncap);
      }
      if (IPv6FlowLabelEncap != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(IPv6FlowLabelEncap);
      }
      if (FragmentIdEncap != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FragmentIdEncap);
      }
      if (FragmentOffsetEncap != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FragmentOffsetEncap);
      }
      if (HasMPLS != false) {
        size += 2 + 1;
      }
      if (MPLSCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MPLSCount);
      }
      if (MPLS1TTL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MPLS1TTL);
      }
      if (MPLS1Label != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MPLS1Label);
      }
      if (MPLS2TTL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MPLS2TTL);
      }
      if (MPLS2Label != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MPLS2Label);
      }
      if (MPLS3TTL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MPLS3TTL);
      }
      if (MPLS3Label != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MPLS3Label);
      }
      if (MPLSLastTTL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MPLSLastTTL);
      }
      if (MPLSLastLabel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MPLSLastLabel);
      }
      if (HasPPP != false) {
        size += 2 + 1;
      }
      if (PPPAddressControl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PPPAddressControl);
      }
      if (Cid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Cid);
      }
      if (CidString.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CidString);
      }
      if (Normalized != global::Flowmessageenriched.FlowMessage.Types.NormalizedType.No) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Normalized);
      }
      if (SrcIfName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SrcIfName);
      }
      if (SrcIfDesc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SrcIfDesc);
      }
      if (SrcIfSpeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SrcIfSpeed);
      }
      if (DstIfName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DstIfName);
      }
      if (DstIfDesc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DstIfDesc);
      }
      if (DstIfSpeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DstIfSpeed);
      }
      if (ProtoName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ProtoName);
      }
      if (RemoteCountry.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RemoteCountry);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlowMessage other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Flowmessageenriched.FlowMessage.Types.FlowType.Flowunknown) {
        Type = other.Type;
      }
      if (other.TimeReceived != 0UL) {
        TimeReceived = other.TimeReceived;
      }
      if (other.SequenceNum != 0) {
        SequenceNum = other.SequenceNum;
      }
      if (other.SamplingRate != 0UL) {
        SamplingRate = other.SamplingRate;
      }
      if (other.FlowDirection != 0) {
        FlowDirection = other.FlowDirection;
      }
      if (other.SamplerAddress.Length != 0) {
        SamplerAddress = other.SamplerAddress;
      }
      if (other.TimeFlowStart != 0UL) {
        TimeFlowStart = other.TimeFlowStart;
      }
      if (other.TimeFlowEnd != 0UL) {
        TimeFlowEnd = other.TimeFlowEnd;
      }
      if (other.Bytes != 0UL) {
        Bytes = other.Bytes;
      }
      if (other.Packets != 0UL) {
        Packets = other.Packets;
      }
      if (other.SrcAddr.Length != 0) {
        SrcAddr = other.SrcAddr;
      }
      if (other.DstAddr.Length != 0) {
        DstAddr = other.DstAddr;
      }
      if (other.Etype != 0) {
        Etype = other.Etype;
      }
      if (other.Proto != 0) {
        Proto = other.Proto;
      }
      if (other.SrcPort != 0) {
        SrcPort = other.SrcPort;
      }
      if (other.DstPort != 0) {
        DstPort = other.DstPort;
      }
      if (other.InIf != 0) {
        InIf = other.InIf;
      }
      if (other.OutIf != 0) {
        OutIf = other.OutIf;
      }
      if (other.SrcMac != 0UL) {
        SrcMac = other.SrcMac;
      }
      if (other.DstMac != 0UL) {
        DstMac = other.DstMac;
      }
      if (other.SrcVlan != 0) {
        SrcVlan = other.SrcVlan;
      }
      if (other.DstVlan != 0) {
        DstVlan = other.DstVlan;
      }
      if (other.VlanId != 0) {
        VlanId = other.VlanId;
      }
      if (other.IngressVrfID != 0) {
        IngressVrfID = other.IngressVrfID;
      }
      if (other.EgressVrfID != 0) {
        EgressVrfID = other.EgressVrfID;
      }
      if (other.IPTos != 0) {
        IPTos = other.IPTos;
      }
      if (other.ForwardingStatus != 0) {
        ForwardingStatus = other.ForwardingStatus;
      }
      if (other.IPTTL != 0) {
        IPTTL = other.IPTTL;
      }
      if (other.TCPFlags != 0) {
        TCPFlags = other.TCPFlags;
      }
      if (other.IcmpType != 0) {
        IcmpType = other.IcmpType;
      }
      if (other.IcmpCode != 0) {
        IcmpCode = other.IcmpCode;
      }
      if (other.IPv6FlowLabel != 0) {
        IPv6FlowLabel = other.IPv6FlowLabel;
      }
      if (other.FragmentId != 0) {
        FragmentId = other.FragmentId;
      }
      if (other.FragmentOffset != 0) {
        FragmentOffset = other.FragmentOffset;
      }
      if (other.BiFlowDirection != 0) {
        BiFlowDirection = other.BiFlowDirection;
      }
      if (other.SrcAS != 0) {
        SrcAS = other.SrcAS;
      }
      if (other.DstAS != 0) {
        DstAS = other.DstAS;
      }
      if (other.NextHop.Length != 0) {
        NextHop = other.NextHop;
      }
      if (other.NextHopAS != 0) {
        NextHopAS = other.NextHopAS;
      }
      if (other.SrcNet != 0) {
        SrcNet = other.SrcNet;
      }
      if (other.DstNet != 0) {
        DstNet = other.DstNet;
      }
      if (other.HasEncap != false) {
        HasEncap = other.HasEncap;
      }
      if (other.SrcAddrEncap.Length != 0) {
        SrcAddrEncap = other.SrcAddrEncap;
      }
      if (other.DstAddrEncap.Length != 0) {
        DstAddrEncap = other.DstAddrEncap;
      }
      if (other.ProtoEncap != 0) {
        ProtoEncap = other.ProtoEncap;
      }
      if (other.EtypeEncap != 0) {
        EtypeEncap = other.EtypeEncap;
      }
      if (other.IPTosEncap != 0) {
        IPTosEncap = other.IPTosEncap;
      }
      if (other.IPTTLEncap != 0) {
        IPTTLEncap = other.IPTTLEncap;
      }
      if (other.IPv6FlowLabelEncap != 0) {
        IPv6FlowLabelEncap = other.IPv6FlowLabelEncap;
      }
      if (other.FragmentIdEncap != 0) {
        FragmentIdEncap = other.FragmentIdEncap;
      }
      if (other.FragmentOffsetEncap != 0) {
        FragmentOffsetEncap = other.FragmentOffsetEncap;
      }
      if (other.HasMPLS != false) {
        HasMPLS = other.HasMPLS;
      }
      if (other.MPLSCount != 0) {
        MPLSCount = other.MPLSCount;
      }
      if (other.MPLS1TTL != 0) {
        MPLS1TTL = other.MPLS1TTL;
      }
      if (other.MPLS1Label != 0) {
        MPLS1Label = other.MPLS1Label;
      }
      if (other.MPLS2TTL != 0) {
        MPLS2TTL = other.MPLS2TTL;
      }
      if (other.MPLS2Label != 0) {
        MPLS2Label = other.MPLS2Label;
      }
      if (other.MPLS3TTL != 0) {
        MPLS3TTL = other.MPLS3TTL;
      }
      if (other.MPLS3Label != 0) {
        MPLS3Label = other.MPLS3Label;
      }
      if (other.MPLSLastTTL != 0) {
        MPLSLastTTL = other.MPLSLastTTL;
      }
      if (other.MPLSLastLabel != 0) {
        MPLSLastLabel = other.MPLSLastLabel;
      }
      if (other.HasPPP != false) {
        HasPPP = other.HasPPP;
      }
      if (other.PPPAddressControl != 0) {
        PPPAddressControl = other.PPPAddressControl;
      }
      if (other.Cid != 0) {
        Cid = other.Cid;
      }
      if (other.CidString.Length != 0) {
        CidString = other.CidString;
      }
      if (other.Normalized != global::Flowmessageenriched.FlowMessage.Types.NormalizedType.No) {
        Normalized = other.Normalized;
      }
      if (other.SrcIfName.Length != 0) {
        SrcIfName = other.SrcIfName;
      }
      if (other.SrcIfDesc.Length != 0) {
        SrcIfDesc = other.SrcIfDesc;
      }
      if (other.SrcIfSpeed != 0) {
        SrcIfSpeed = other.SrcIfSpeed;
      }
      if (other.DstIfName.Length != 0) {
        DstIfName = other.DstIfName;
      }
      if (other.DstIfDesc.Length != 0) {
        DstIfDesc = other.DstIfDesc;
      }
      if (other.DstIfSpeed != 0) {
        DstIfSpeed = other.DstIfSpeed;
      }
      if (other.ProtoName.Length != 0) {
        ProtoName = other.ProtoName;
      }
      if (other.RemoteCountry.Length != 0) {
        RemoteCountry = other.RemoteCountry;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Flowmessageenriched.FlowMessage.Types.FlowType) input.ReadEnum();
            break;
          }
          case 16: {
            TimeReceived = input.ReadUInt64();
            break;
          }
          case 24: {
            SamplingRate = input.ReadUInt64();
            break;
          }
          case 32: {
            SequenceNum = input.ReadUInt32();
            break;
          }
          case 40: {
            TimeFlowEnd = input.ReadUInt64();
            break;
          }
          case 50: {
            SrcAddr = input.ReadBytes();
            break;
          }
          case 58: {
            DstAddr = input.ReadBytes();
            break;
          }
          case 72: {
            Bytes = input.ReadUInt64();
            break;
          }
          case 80: {
            Packets = input.ReadUInt64();
            break;
          }
          case 90: {
            SamplerAddress = input.ReadBytes();
            break;
          }
          case 98: {
            NextHop = input.ReadBytes();
            break;
          }
          case 104: {
            NextHopAS = input.ReadUInt32();
            break;
          }
          case 112: {
            SrcAS = input.ReadUInt32();
            break;
          }
          case 120: {
            DstAS = input.ReadUInt32();
            break;
          }
          case 128: {
            SrcNet = input.ReadUInt32();
            break;
          }
          case 136: {
            DstNet = input.ReadUInt32();
            break;
          }
          case 144: {
            InIf = input.ReadUInt32();
            break;
          }
          case 152: {
            OutIf = input.ReadUInt32();
            break;
          }
          case 160: {
            Proto = input.ReadUInt32();
            break;
          }
          case 168: {
            SrcPort = input.ReadUInt32();
            break;
          }
          case 176: {
            DstPort = input.ReadUInt32();
            break;
          }
          case 184: {
            IPTos = input.ReadUInt32();
            break;
          }
          case 192: {
            ForwardingStatus = input.ReadUInt32();
            break;
          }
          case 200: {
            IPTTL = input.ReadUInt32();
            break;
          }
          case 208: {
            TCPFlags = input.ReadUInt32();
            break;
          }
          case 216: {
            SrcMac = input.ReadUInt64();
            break;
          }
          case 224: {
            DstMac = input.ReadUInt64();
            break;
          }
          case 232: {
            VlanId = input.ReadUInt32();
            break;
          }
          case 240: {
            Etype = input.ReadUInt32();
            break;
          }
          case 248: {
            IcmpType = input.ReadUInt32();
            break;
          }
          case 256: {
            IcmpCode = input.ReadUInt32();
            break;
          }
          case 264: {
            SrcVlan = input.ReadUInt32();
            break;
          }
          case 272: {
            DstVlan = input.ReadUInt32();
            break;
          }
          case 280: {
            FragmentId = input.ReadUInt32();
            break;
          }
          case 288: {
            FragmentOffset = input.ReadUInt32();
            break;
          }
          case 296: {
            IPv6FlowLabel = input.ReadUInt32();
            break;
          }
          case 304: {
            TimeFlowStart = input.ReadUInt64();
            break;
          }
          case 312: {
            IngressVrfID = input.ReadUInt32();
            break;
          }
          case 320: {
            EgressVrfID = input.ReadUInt32();
            break;
          }
          case 328: {
            BiFlowDirection = input.ReadUInt32();
            break;
          }
          case 336: {
            FlowDirection = input.ReadUInt32();
            break;
          }
          case 344: {
            HasEncap = input.ReadBool();
            break;
          }
          case 354: {
            SrcAddrEncap = input.ReadBytes();
            break;
          }
          case 362: {
            DstAddrEncap = input.ReadBytes();
            break;
          }
          case 368: {
            ProtoEncap = input.ReadUInt32();
            break;
          }
          case 376: {
            EtypeEncap = input.ReadUInt32();
            break;
          }
          case 384: {
            IPTosEncap = input.ReadUInt32();
            break;
          }
          case 392: {
            IPTTLEncap = input.ReadUInt32();
            break;
          }
          case 400: {
            IPv6FlowLabelEncap = input.ReadUInt32();
            break;
          }
          case 408: {
            FragmentIdEncap = input.ReadUInt32();
            break;
          }
          case 416: {
            FragmentOffsetEncap = input.ReadUInt32();
            break;
          }
          case 424: {
            HasMPLS = input.ReadBool();
            break;
          }
          case 432: {
            MPLSCount = input.ReadUInt32();
            break;
          }
          case 440: {
            MPLS1TTL = input.ReadUInt32();
            break;
          }
          case 448: {
            MPLS1Label = input.ReadUInt32();
            break;
          }
          case 456: {
            MPLS2TTL = input.ReadUInt32();
            break;
          }
          case 464: {
            MPLS2Label = input.ReadUInt32();
            break;
          }
          case 472: {
            MPLS3TTL = input.ReadUInt32();
            break;
          }
          case 480: {
            MPLS3Label = input.ReadUInt32();
            break;
          }
          case 488: {
            MPLSLastTTL = input.ReadUInt32();
            break;
          }
          case 496: {
            MPLSLastLabel = input.ReadUInt32();
            break;
          }
          case 504: {
            HasPPP = input.ReadBool();
            break;
          }
          case 512: {
            PPPAddressControl = input.ReadUInt32();
            break;
          }
          case 8000: {
            Cid = input.ReadUInt32();
            break;
          }
          case 8010: {
            CidString = input.ReadString();
            break;
          }
          case 8016: {
            Normalized = (global::Flowmessageenriched.FlowMessage.Types.NormalizedType) input.ReadEnum();
            break;
          }
          case 8026: {
            SrcIfName = input.ReadString();
            break;
          }
          case 8034: {
            SrcIfDesc = input.ReadString();
            break;
          }
          case 8040: {
            SrcIfSpeed = input.ReadUInt32();
            break;
          }
          case 8050: {
            DstIfName = input.ReadString();
            break;
          }
          case 8058: {
            DstIfDesc = input.ReadString();
            break;
          }
          case 8064: {
            DstIfSpeed = input.ReadUInt32();
            break;
          }
          case 8074: {
            ProtoName = input.ReadString();
            break;
          }
          case 8082: {
            RemoteCountry = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FlowMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum FlowType {
        [pbr::OriginalName("FLOWUNKNOWN")] Flowunknown = 0,
        [pbr::OriginalName("SFLOW_5")] Sflow5 = 1,
        [pbr::OriginalName("NETFLOW_V5")] NetflowV5 = 2,
        [pbr::OriginalName("NETFLOW_V9")] NetflowV9 = 3,
        [pbr::OriginalName("IPFIX")] Ipfix = 4,
      }

      public enum NormalizedType {
        [pbr::OriginalName("No")] No = 0,
        [pbr::OriginalName("Yes")] Yes = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
