// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow-messages-enriched.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "FlowMessagesEnriched.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - FlowMessagesEnrichedRoot

@implementation FlowMessagesEnrichedRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - FlowMessagesEnrichedRoot_FileDescriptor

static GPBFileDescriptor *FlowMessagesEnrichedRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"flowprotob"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - FlowMessage

@implementation FlowMessage

@dynamic type;
@dynamic timeReceived;
@dynamic sequenceNum;
@dynamic samplingRate;
@dynamic flowDirection;
@dynamic samplerAddress;
@dynamic timeFlowStart;
@dynamic timeFlowEnd;
@dynamic bytes;
@dynamic packets;
@dynamic srcAddr;
@dynamic dstAddr;
@dynamic etype;
@dynamic proto;
@dynamic srcPort;
@dynamic dstPort;
@dynamic srcIf;
@dynamic dstIf;
@dynamic srcMac;
@dynamic dstMac;
@dynamic srcVlan;
@dynamic dstVlan;
@dynamic vlanId;
@dynamic ingressVrfId;
@dynamic egressVrfId;
@dynamic iptos;
@dynamic forwardingStatus;
@dynamic ipttl;
@dynamic tcpflags;
@dynamic icmpType;
@dynamic icmpCode;
@dynamic ipv6FlowLabel;
@dynamic fragmentId;
@dynamic fragmentOffset;
@dynamic biFlowDirection;
@dynamic srcAs;
@dynamic dstAs;
@dynamic nextHop;
@dynamic nextHopAs;
@dynamic srcNet;
@dynamic dstNet;
@dynamic cid;
@dynamic cidString;
@dynamic normalized;
@dynamic srcIfName;
@dynamic srcIfDesc;
@dynamic srcIfSpeed;
@dynamic dstIfName;
@dynamic dstIfDesc;
@dynamic dstIfSpeed;
@dynamic protoName;
@dynamic remoteCountry;

typedef struct FlowMessage__storage_ {
  uint32_t _has_storage_[2];
  FlowMessage_FlowType type;
  uint32_t sequenceNum;
  uint32_t nextHopAs;
  uint32_t srcAs;
  uint32_t dstAs;
  uint32_t srcNet;
  uint32_t dstNet;
  uint32_t srcIf;
  uint32_t dstIf;
  uint32_t proto;
  uint32_t srcPort;
  uint32_t dstPort;
  uint32_t iptos;
  uint32_t forwardingStatus;
  uint32_t ipttl;
  uint32_t tcpflags;
  uint32_t vlanId;
  uint32_t etype;
  uint32_t icmpType;
  uint32_t icmpCode;
  uint32_t srcVlan;
  uint32_t dstVlan;
  uint32_t fragmentId;
  uint32_t fragmentOffset;
  uint32_t ipv6FlowLabel;
  uint32_t ingressVrfId;
  uint32_t egressVrfId;
  uint32_t biFlowDirection;
  uint32_t flowDirection;
  uint32_t cid;
  FlowMessage_NormalizedType normalized;
  uint32_t srcIfSpeed;
  uint32_t dstIfSpeed;
  NSData *srcAddr;
  NSData *dstAddr;
  NSData *samplerAddress;
  NSData *nextHop;
  NSString *cidString;
  NSString *srcIfName;
  NSString *srcIfDesc;
  NSString *dstIfName;
  NSString *dstIfDesc;
  NSString *protoName;
  NSString *remoteCountry;
  uint64_t timeReceived;
  uint64_t samplingRate;
  uint64_t timeFlowEnd;
  uint64_t bytes;
  uint64_t packets;
  uint64_t srcMac;
  uint64_t dstMac;
  uint64_t timeFlowStart;
} FlowMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = FlowMessage_FlowType_EnumDescriptor,
        .number = FlowMessage_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "timeReceived",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_TimeReceived,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, timeReceived),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "samplingRate",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_SamplingRate,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, samplingRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "sequenceNum",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_SequenceNum,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, sequenceNum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "timeFlowEnd",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_TimeFlowEnd,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, timeFlowEnd),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "srcAddr",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_SrcAddr,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, srcAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "dstAddr",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_DstAddr,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, dstAddr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "bytes",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_Bytes,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, bytes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "packets",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_Packets,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, packets),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "samplerAddress",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_SamplerAddress,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, samplerAddress),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "nextHop",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_NextHop,
        .hasIndex = 37,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, nextHop),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "nextHopAs",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_NextHopAs,
        .hasIndex = 38,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, nextHopAs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "srcAs",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_SrcAs,
        .hasIndex = 35,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, srcAs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dstAs",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_DstAs,
        .hasIndex = 36,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, dstAs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "srcNet",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_SrcNet,
        .hasIndex = 39,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, srcNet),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dstNet",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_DstNet,
        .hasIndex = 40,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, dstNet),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "srcIf",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_SrcIf,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, srcIf),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dstIf",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_DstIf,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, dstIf),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "proto",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_Proto,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, proto),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "srcPort",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_SrcPort,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, srcPort),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dstPort",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_DstPort,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, dstPort),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "iptos",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_Iptos,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, iptos),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "forwardingStatus",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_ForwardingStatus,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, forwardingStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ipttl",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_Ipttl,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, ipttl),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "tcpflags",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_Tcpflags,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, tcpflags),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "srcMac",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_SrcMac,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, srcMac),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "dstMac",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_DstMac,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, dstMac),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "vlanId",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_VlanId,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, vlanId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "etype",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_Etype,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, etype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "icmpType",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_IcmpType,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, icmpType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "icmpCode",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_IcmpCode,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, icmpCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "srcVlan",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_SrcVlan,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, srcVlan),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dstVlan",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_DstVlan,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, dstVlan),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fragmentId",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_FragmentId,
        .hasIndex = 32,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, fragmentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "fragmentOffset",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_FragmentOffset,
        .hasIndex = 33,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, fragmentOffset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ipv6FlowLabel",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_Ipv6FlowLabel,
        .hasIndex = 31,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, ipv6FlowLabel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "timeFlowStart",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_TimeFlowStart,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, timeFlowStart),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "ingressVrfId",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_IngressVrfId,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, ingressVrfId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "egressVrfId",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_EgressVrfId,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, egressVrfId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "biFlowDirection",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_BiFlowDirection,
        .hasIndex = 34,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, biFlowDirection),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "flowDirection",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_FlowDirection,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, flowDirection),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cid",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_Cid,
        .hasIndex = 41,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, cid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cidString",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_CidString,
        .hasIndex = 42,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, cidString),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "normalized",
        .dataTypeSpecific.enumDescFunc = FlowMessage_NormalizedType_EnumDescriptor,
        .number = FlowMessage_FieldNumber_Normalized,
        .hasIndex = 43,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, normalized),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "srcIfName",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_SrcIfName,
        .hasIndex = 44,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, srcIfName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "srcIfDesc",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_SrcIfDesc,
        .hasIndex = 45,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, srcIfDesc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "srcIfSpeed",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_SrcIfSpeed,
        .hasIndex = 46,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, srcIfSpeed),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dstIfName",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_DstIfName,
        .hasIndex = 47,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, dstIfName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dstIfDesc",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_DstIfDesc,
        .hasIndex = 48,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, dstIfDesc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dstIfSpeed",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_DstIfSpeed,
        .hasIndex = 49,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, dstIfSpeed),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "protoName",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_ProtoName,
        .hasIndex = 50,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, protoName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remoteCountry",
        .dataTypeSpecific.className = NULL,
        .number = FlowMessage_FieldNumber_RemoteCountry,
        .hasIndex = 51,
        .offset = (uint32_t)offsetof(FlowMessage__storage_, remoteCountry),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FlowMessage class]
                                     rootClass:[FlowMessagesEnrichedRoot class]
                                          file:FlowMessagesEnrichedRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FlowMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "4\001D\000\002L\000\003L\000\004K\000\005K\000\006G\000\007G\000\tE\000\nG\000\013N\000\014G\000\rHA\000\016D"
        "A\000\017DA\000\020F\000\021F\000\022E\000\023E\000\024E\000\025G\000\026G\000\027c\002\000\030P\000\031e\000\032d\004"
        "\000\033F\000\034F\000\035F\000\036E\000\037H\000 H\000!G\000\"G\000#J\000$N\000%b\013\000&M\000\'K"
        "A\000(JA\000)O\000*M\000\350\007C\000\351\007I\000\352\007J\000\353\007I\000\354\007I\000\355\007J\000\356\007I\000"
        "\357\007I\000\360\007J\000\361\007I\000\362\007M\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t FlowMessage_Type_RawValue(FlowMessage *message) {
  GPBDescriptor *descriptor = [FlowMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FlowMessage_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetFlowMessage_Type_RawValue(FlowMessage *message, int32_t value) {
  GPBDescriptor *descriptor = [FlowMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FlowMessage_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t FlowMessage_Normalized_RawValue(FlowMessage *message) {
  GPBDescriptor *descriptor = [FlowMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FlowMessage_FieldNumber_Normalized];
  return GPBGetMessageInt32Field(message, field);
}

void SetFlowMessage_Normalized_RawValue(FlowMessage *message, int32_t value) {
  GPBDescriptor *descriptor = [FlowMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FlowMessage_FieldNumber_Normalized];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum FlowMessage_FlowType

GPBEnumDescriptor *FlowMessage_FlowType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Flowunknown\000Sflow5\000NetflowV5\000NetflowV9\000I"
        "pfix\000";
    static const int32_t values[] = {
        FlowMessage_FlowType_Flowunknown,
        FlowMessage_FlowType_Sflow5,
        FlowMessage_FlowType_NetflowV5,
        FlowMessage_FlowType_NetflowV9,
        FlowMessage_FlowType_Ipfix,
    };
    static const char *extraTextFormatInfo = "\001\001e\201\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(FlowMessage_FlowType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:FlowMessage_FlowType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL FlowMessage_FlowType_IsValidValue(int32_t value__) {
  switch (value__) {
    case FlowMessage_FlowType_Flowunknown:
    case FlowMessage_FlowType_Sflow5:
    case FlowMessage_FlowType_NetflowV5:
    case FlowMessage_FlowType_NetflowV9:
    case FlowMessage_FlowType_Ipfix:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum FlowMessage_NormalizedType

GPBEnumDescriptor *FlowMessage_NormalizedType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "No\000Yes\000";
    static const int32_t values[] = {
        FlowMessage_NormalizedType_No,
        FlowMessage_NormalizedType_Yes,
    };
    static const char *extraTextFormatInfo = "\002\000\002\000\001\003\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(FlowMessage_NormalizedType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:FlowMessage_NormalizedType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL FlowMessage_NormalizedType_IsValidValue(int32_t value__) {
  switch (value__) {
    case FlowMessage_NormalizedType_No:
    case FlowMessage_NormalizedType_Yes:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
