// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow-messages-enriched.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum FlowMessage_FlowType

typedef GPB_ENUM(FlowMessage_FlowType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  FlowMessage_FlowType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  FlowMessage_FlowType_Flowunknown = 0,
  FlowMessage_FlowType_Nfv9 = 9,
  FlowMessage_FlowType_Ipfix = 10,
  FlowMessage_FlowType_Sflow = 5,
};

GPBEnumDescriptor *FlowMessage_FlowType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL FlowMessage_FlowType_IsValidValue(int32_t value);

#pragma mark - Enum FlowMessage_IPType

/** To be deprecated */
typedef GPB_ENUM(FlowMessage_IPType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  FlowMessage_IPType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  FlowMessage_IPType_Ipunknown = 0,
  FlowMessage_IPType_Ipv4 = 4,
  FlowMessage_IPType_Ipv6 = 6,
};

GPBEnumDescriptor *FlowMessage_IPType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL FlowMessage_IPType_IsValidValue(int32_t value);

#pragma mark - Enum FlowMessage_DirectionType

/** Extensions beyond goflow's default protobuf, starting at id 90 */
typedef GPB_ENUM(FlowMessage_DirectionType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  FlowMessage_DirectionType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  FlowMessage_DirectionType_Unknown = 0,
  FlowMessage_DirectionType_Incoming = 1,
  FlowMessage_DirectionType_Outgoing = 2,
};

GPBEnumDescriptor *FlowMessage_DirectionType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL FlowMessage_DirectionType_IsValidValue(int32_t value);

#pragma mark - Enum FlowMessage_NormalizedType

typedef GPB_ENUM(FlowMessage_NormalizedType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  FlowMessage_NormalizedType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  FlowMessage_NormalizedType_No = 0,
  FlowMessage_NormalizedType_Yes = 1,
};

GPBEnumDescriptor *FlowMessage_NormalizedType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL FlowMessage_NormalizedType_IsValidValue(int32_t value);

#pragma mark - FlowMessagesEnrichedRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface FlowMessagesEnrichedRoot : GPBRootObject
@end

#pragma mark - FlowMessage

typedef GPB_ENUM(FlowMessage_FieldNumber) {
  FlowMessage_FieldNumber_Type = 1,
  FlowMessage_FieldNumber_TimeRecvd = 2,
  FlowMessage_FieldNumber_SamplingRate = 3,
  FlowMessage_FieldNumber_SequenceNum = 4,
  FlowMessage_FieldNumber_TimeFlow = 5,
  FlowMessage_FieldNumber_SrcIp = 6,
  FlowMessage_FieldNumber_DstIp = 7,
  FlowMessage_FieldNumber_Ipversion = 8,
  FlowMessage_FieldNumber_Bytes = 9,
  FlowMessage_FieldNumber_Packets = 10,
  FlowMessage_FieldNumber_RouterAddr = 11,
  FlowMessage_FieldNumber_NextHop = 12,
  FlowMessage_FieldNumber_NextHopAs = 13,
  FlowMessage_FieldNumber_SrcAs = 14,
  FlowMessage_FieldNumber_DstAs = 15,
  FlowMessage_FieldNumber_SrcNet = 16,
  FlowMessage_FieldNumber_DstNet = 17,
  FlowMessage_FieldNumber_SrcIf = 18,
  FlowMessage_FieldNumber_DstIf = 19,
  FlowMessage_FieldNumber_Proto = 20,
  FlowMessage_FieldNumber_SrcPort = 21,
  FlowMessage_FieldNumber_DstPort = 22,
  FlowMessage_FieldNumber_Iptos = 23,
  FlowMessage_FieldNumber_ForwardingStatus = 24,
  FlowMessage_FieldNumber_Ipttl = 25,
  FlowMessage_FieldNumber_Tcpflags = 26,
  FlowMessage_FieldNumber_SrcMac = 27,
  FlowMessage_FieldNumber_DstMac = 28,
  FlowMessage_FieldNumber_VlanId = 29,
  FlowMessage_FieldNumber_Etype = 30,
  FlowMessage_FieldNumber_Direction = 90,
  FlowMessage_FieldNumber_Cid = 91,
  FlowMessage_FieldNumber_Normalized = 92,
  FlowMessage_FieldNumber_SrcIfName = 93,
  FlowMessage_FieldNumber_SrcIfDesc = 94,
  FlowMessage_FieldNumber_SrcIfSpeed = 95,
  FlowMessage_FieldNumber_DstIfName = 96,
  FlowMessage_FieldNumber_DstIfDesc = 97,
  FlowMessage_FieldNumber_DstIfSpeed = 98,
  FlowMessage_FieldNumber_Peer = 99,
};

/**
 * Flow Message needs to stay compatible to goflow's default protobuf
 * -> never edit record id's, only ever append
 **/
@interface FlowMessage : GPBMessage

@property(nonatomic, readwrite) FlowMessage_FlowType type;

@property(nonatomic, readwrite) uint64_t timeRecvd;

@property(nonatomic, readwrite) uint64_t samplingRate;

@property(nonatomic, readwrite) uint32_t sequenceNum;

/** Found inside packet */
@property(nonatomic, readwrite) uint64_t timeFlow;

/** Source/destination addresses */
@property(nonatomic, readwrite, copy, null_resettable) NSData *srcIp;

@property(nonatomic, readwrite, copy, null_resettable) NSData *dstIp;

@property(nonatomic, readwrite) FlowMessage_IPType ipversion;

/** Size of the sampled packet */
@property(nonatomic, readwrite) uint64_t bytes;

@property(nonatomic, readwrite) uint64_t packets;

/** Routing information */
@property(nonatomic, readwrite, copy, null_resettable) NSData *routerAddr;

@property(nonatomic, readwrite, copy, null_resettable) NSData *nextHop;

@property(nonatomic, readwrite) uint32_t nextHopAs;

/** Autonomous system information */
@property(nonatomic, readwrite) uint32_t srcAs;

@property(nonatomic, readwrite) uint32_t dstAs;

/** Prefix size */
@property(nonatomic, readwrite) uint32_t srcNet;

@property(nonatomic, readwrite) uint32_t dstNet;

/** Interfaces */
@property(nonatomic, readwrite) uint32_t srcIf;

@property(nonatomic, readwrite) uint32_t dstIf;

/** Layer 4 protocol */
@property(nonatomic, readwrite) uint32_t proto;

/** Port for UDP and TCP */
@property(nonatomic, readwrite) uint32_t srcPort;

@property(nonatomic, readwrite) uint32_t dstPort;

/** IP and TCP special flags */
@property(nonatomic, readwrite) uint32_t iptos;

@property(nonatomic, readwrite) uint32_t forwardingStatus;

@property(nonatomic, readwrite) uint32_t ipttl;

@property(nonatomic, readwrite) uint32_t tcpflags;

/** Ethernet information */
@property(nonatomic, readwrite) uint64_t srcMac;

@property(nonatomic, readwrite) uint64_t dstMac;

@property(nonatomic, readwrite) uint32_t vlanId;

/** Layer 3 protocol (IPv4/IPv6/ARP/...) */
@property(nonatomic, readwrite) uint32_t etype;

@property(nonatomic, readwrite) FlowMessage_DirectionType direction;

@property(nonatomic, readwrite) uint32_t cid;

@property(nonatomic, readwrite) FlowMessage_NormalizedType normalized;

@property(nonatomic, readwrite, copy, null_resettable) NSString *srcIfName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *srcIfDesc;

@property(nonatomic, readwrite) uint32_t srcIfSpeed;

@property(nonatomic, readwrite, copy, null_resettable) NSString *dstIfName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *dstIfDesc;

@property(nonatomic, readwrite) uint32_t dstIfSpeed;

@property(nonatomic, readwrite, copy, null_resettable) NSString *peer;

@end

/**
 * Fetches the raw value of a @c FlowMessage's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t FlowMessage_Type_RawValue(FlowMessage *message);
/**
 * Sets the raw value of an @c FlowMessage's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetFlowMessage_Type_RawValue(FlowMessage *message, int32_t value);

/**
 * Fetches the raw value of a @c FlowMessage's @c ipversion property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t FlowMessage_Ipversion_RawValue(FlowMessage *message);
/**
 * Sets the raw value of an @c FlowMessage's @c ipversion property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetFlowMessage_Ipversion_RawValue(FlowMessage *message, int32_t value);

/**
 * Fetches the raw value of a @c FlowMessage's @c direction property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t FlowMessage_Direction_RawValue(FlowMessage *message);
/**
 * Sets the raw value of an @c FlowMessage's @c direction property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetFlowMessage_Direction_RawValue(FlowMessage *message, int32_t value);

/**
 * Fetches the raw value of a @c FlowMessage's @c normalized property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t FlowMessage_Normalized_RawValue(FlowMessage *message);
/**
 * Sets the raw value of an @c FlowMessage's @c normalized property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetFlowMessage_Normalized_RawValue(FlowMessage *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
