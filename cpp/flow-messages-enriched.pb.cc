// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow-messages-enriched.proto

#include "flow-messages-enriched.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace flowmessageenriched {
class FlowMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowMessage> _instance;
} _FlowMessage_default_instance_;
}  // namespace flowmessageenriched
static void InitDefaultsscc_info_FlowMessage_flow_2dmessages_2denriched_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flowmessageenriched::_FlowMessage_default_instance_;
    new (ptr) ::flowmessageenriched::FlowMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flowmessageenriched::FlowMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowMessage_flow_2dmessages_2denriched_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlowMessage_flow_2dmessages_2denriched_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flow_2dmessages_2denriched_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flow_2dmessages_2denriched_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flow_2dmessages_2denriched_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_flow_2dmessages_2denriched_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, type_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, timereceived_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, sequencenum_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, samplingrate_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, flowdirection_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, sampleraddress_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, timeflowstart_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, timeflowend_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, bytes_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, packets_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcaddr_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstaddr_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, etype_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, proto_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcport_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstport_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, inif_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, outif_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcmac_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstmac_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcvlan_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstvlan_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, vlanid_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, ingressvrfid_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, egressvrfid_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, iptos_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, forwardingstatus_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, ipttl_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, tcpflags_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, icmptype_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, icmpcode_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, ipv6flowlabel_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, fragmentid_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, fragmentoffset_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, biflowdirection_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcas_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstas_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, nexthop_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, nexthopas_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcnet_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstnet_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, hasencap_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcaddrencap_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstaddrencap_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, protoencap_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, etypeencap_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, iptosencap_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, ipttlencap_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, ipv6flowlabelencap_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, fragmentidencap_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, fragmentoffsetencap_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, hasmpls_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, mplscount_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, mpls1ttl_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, mpls1label_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, mpls2ttl_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, mpls2label_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, mpls3ttl_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, mpls3label_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, mplslastttl_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, mplslastlabel_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, hasppp_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, pppaddresscontrol_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, cid_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, cidstring_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, normalized_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcifname_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcifdesc_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcifspeed_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstifname_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstifdesc_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstifspeed_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, protoname_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, remotecountry_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flowmessageenriched::FlowMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flowmessageenriched::_FlowMessage_default_instance_),
};

const char descriptor_table_protodef_flow_2dmessages_2denriched_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034flow-messages-enriched.proto\022\023flowmess"
  "ageenriched\"\375\014\n\013FlowMessage\0227\n\004Type\030\001 \001("
  "\0162).flowmessageenriched.FlowMessage.Flow"
  "Type\022\024\n\014TimeReceived\030\002 \001(\004\022\023\n\013SequenceNu"
  "m\030\004 \001(\r\022\024\n\014SamplingRate\030\003 \001(\004\022\025\n\rFlowDir"
  "ection\030* \001(\r\022\026\n\016SamplerAddress\030\013 \001(\014\022\025\n\r"
  "TimeFlowStart\030& \001(\004\022\023\n\013TimeFlowEnd\030\005 \001(\004"
  "\022\r\n\005Bytes\030\t \001(\004\022\017\n\007Packets\030\n \001(\004\022\017\n\007SrcA"
  "ddr\030\006 \001(\014\022\017\n\007DstAddr\030\007 \001(\014\022\r\n\005Etype\030\036 \001("
  "\r\022\r\n\005Proto\030\024 \001(\r\022\017\n\007SrcPort\030\025 \001(\r\022\017\n\007Dst"
  "Port\030\026 \001(\r\022\014\n\004InIf\030\022 \001(\r\022\r\n\005OutIf\030\023 \001(\r\022"
  "\016\n\006SrcMac\030\033 \001(\004\022\016\n\006DstMac\030\034 \001(\004\022\017\n\007SrcVl"
  "an\030! \001(\r\022\017\n\007DstVlan\030\" \001(\r\022\016\n\006VlanId\030\035 \001("
  "\r\022\024\n\014IngressVrfID\030\' \001(\r\022\023\n\013EgressVrfID\030("
  " \001(\r\022\r\n\005IPTos\030\027 \001(\r\022\030\n\020ForwardingStatus\030"
  "\030 \001(\r\022\r\n\005IPTTL\030\031 \001(\r\022\020\n\010TCPFlags\030\032 \001(\r\022\020"
  "\n\010IcmpType\030\037 \001(\r\022\020\n\010IcmpCode\030  \001(\r\022\025\n\rIP"
  "v6FlowLabel\030% \001(\r\022\022\n\nFragmentId\030# \001(\r\022\026\n"
  "\016FragmentOffset\030$ \001(\r\022\027\n\017BiFlowDirection"
  "\030) \001(\r\022\r\n\005SrcAS\030\016 \001(\r\022\r\n\005DstAS\030\017 \001(\r\022\017\n\007"
  "NextHop\030\014 \001(\014\022\021\n\tNextHopAS\030\r \001(\r\022\016\n\006SrcN"
  "et\030\020 \001(\r\022\016\n\006DstNet\030\021 \001(\r\022\020\n\010HasEncap\030+ \001"
  "(\010\022\024\n\014SrcAddrEncap\030, \001(\014\022\024\n\014DstAddrEncap"
  "\030- \001(\014\022\022\n\nProtoEncap\030. \001(\r\022\022\n\nEtypeEncap"
  "\030/ \001(\r\022\022\n\nIPTosEncap\0300 \001(\r\022\022\n\nIPTTLEncap"
  "\0301 \001(\r\022\032\n\022IPv6FlowLabelEncap\0302 \001(\r\022\027\n\017Fr"
  "agmentIdEncap\0303 \001(\r\022\033\n\023FragmentOffsetEnc"
  "ap\0304 \001(\r\022\017\n\007HasMPLS\0305 \001(\010\022\021\n\tMPLSCount\0306"
  " \001(\r\022\020\n\010MPLS1TTL\0307 \001(\r\022\022\n\nMPLS1Label\0308 \001"
  "(\r\022\020\n\010MPLS2TTL\0309 \001(\r\022\022\n\nMPLS2Label\030: \001(\r"
  "\022\020\n\010MPLS3TTL\030; \001(\r\022\022\n\nMPLS3Label\030< \001(\r\022\023"
  "\n\013MPLSLastTTL\030= \001(\r\022\025\n\rMPLSLastLabel\030> \001"
  "(\r\022\016\n\006HasPPP\030\? \001(\010\022\031\n\021PPPAddressControl\030"
  "@ \001(\r\022\014\n\003Cid\030\350\007 \001(\r\022\022\n\tCidString\030\351\007 \001(\t\022"
  "D\n\nNormalized\030\352\007 \001(\0162/.flowmessageenrich"
  "ed.FlowMessage.NormalizedType\022\022\n\tSrcIfNa"
  "me\030\353\007 \001(\t\022\022\n\tSrcIfDesc\030\354\007 \001(\t\022\023\n\nSrcIfSp"
  "eed\030\355\007 \001(\r\022\022\n\tDstIfName\030\356\007 \001(\t\022\022\n\tDstIfD"
  "esc\030\357\007 \001(\t\022\023\n\nDstIfSpeed\030\360\007 \001(\r\022\022\n\tProto"
  "Name\030\361\007 \001(\t\022\026\n\rRemoteCountry\030\362\007 \001(\t\"S\n\010F"
  "lowType\022\017\n\013FLOWUNKNOWN\020\000\022\013\n\007SFLOW_5\020\001\022\016\n"
  "\nNETFLOW_V5\020\002\022\016\n\nNETFLOW_V9\020\003\022\t\n\005IPFIX\020\004"
  "\"!\n\016NormalizedType\022\006\n\002No\020\000\022\007\n\003Yes\020\001B\"\n\tb"
  "wnetflowB\025FlowMessageEnrichedPbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flow_2dmessages_2denriched_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_flow_2dmessages_2denriched_2eproto_sccs[1] = {
  &scc_info_FlowMessage_flow_2dmessages_2denriched_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flow_2dmessages_2denriched_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flow_2dmessages_2denriched_2eproto = {
  false, false, descriptor_table_protodef_flow_2dmessages_2denriched_2eproto, "flow-messages-enriched.proto", 1759,
  &descriptor_table_flow_2dmessages_2denriched_2eproto_once, descriptor_table_flow_2dmessages_2denriched_2eproto_sccs, descriptor_table_flow_2dmessages_2denriched_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_flow_2dmessages_2denriched_2eproto::offsets,
  file_level_metadata_flow_2dmessages_2denriched_2eproto, 1, file_level_enum_descriptors_flow_2dmessages_2denriched_2eproto, file_level_service_descriptors_flow_2dmessages_2denriched_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flow_2dmessages_2denriched_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_flow_2dmessages_2denriched_2eproto)), true);
namespace flowmessageenriched {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlowMessage_FlowType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flow_2dmessages_2denriched_2eproto);
  return file_level_enum_descriptors_flow_2dmessages_2denriched_2eproto[0];
}
bool FlowMessage_FlowType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FlowMessage_FlowType FlowMessage::FLOWUNKNOWN;
constexpr FlowMessage_FlowType FlowMessage::SFLOW_5;
constexpr FlowMessage_FlowType FlowMessage::NETFLOW_V5;
constexpr FlowMessage_FlowType FlowMessage::NETFLOW_V9;
constexpr FlowMessage_FlowType FlowMessage::IPFIX;
constexpr FlowMessage_FlowType FlowMessage::FlowType_MIN;
constexpr FlowMessage_FlowType FlowMessage::FlowType_MAX;
constexpr int FlowMessage::FlowType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlowMessage_NormalizedType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flow_2dmessages_2denriched_2eproto);
  return file_level_enum_descriptors_flow_2dmessages_2denriched_2eproto[1];
}
bool FlowMessage_NormalizedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FlowMessage_NormalizedType FlowMessage::No;
constexpr FlowMessage_NormalizedType FlowMessage::Yes;
constexpr FlowMessage_NormalizedType FlowMessage::NormalizedType_MIN;
constexpr FlowMessage_NormalizedType FlowMessage::NormalizedType_MAX;
constexpr int FlowMessage::NormalizedType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void FlowMessage::InitAsDefaultInstance() {
}
class FlowMessage::_Internal {
 public:
};

FlowMessage::FlowMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:flowmessageenriched.FlowMessage)
}
FlowMessage::FlowMessage(const FlowMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  srcaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_srcaddr().empty()) {
    srcaddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_srcaddr(),
      GetArena());
  }
  dstaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dstaddr().empty()) {
    dstaddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dstaddr(),
      GetArena());
  }
  sampleraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sampleraddress().empty()) {
    sampleraddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sampleraddress(),
      GetArena());
  }
  nexthop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nexthop().empty()) {
    nexthop_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nexthop(),
      GetArena());
  }
  srcaddrencap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_srcaddrencap().empty()) {
    srcaddrencap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_srcaddrencap(),
      GetArena());
  }
  dstaddrencap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dstaddrencap().empty()) {
    dstaddrencap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dstaddrencap(),
      GetArena());
  }
  cidstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cidstring().empty()) {
    cidstring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cidstring(),
      GetArena());
  }
  srcifname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_srcifname().empty()) {
    srcifname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_srcifname(),
      GetArena());
  }
  srcifdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_srcifdesc().empty()) {
    srcifdesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_srcifdesc(),
      GetArena());
  }
  dstifname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dstifname().empty()) {
    dstifname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dstifname(),
      GetArena());
  }
  dstifdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dstifdesc().empty()) {
    dstifdesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dstifdesc(),
      GetArena());
  }
  protoname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protoname().empty()) {
    protoname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_protoname(),
      GetArena());
  }
  remotecountry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remotecountry().empty()) {
    remotecountry_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_remotecountry(),
      GetArena());
  }
  ::memcpy(&timereceived_, &from.timereceived_,
    static_cast<size_t>(reinterpret_cast<char*>(&srcifspeed_) -
    reinterpret_cast<char*>(&timereceived_)) + sizeof(srcifspeed_));
  // @@protoc_insertion_point(copy_constructor:flowmessageenriched.FlowMessage)
}

void FlowMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlowMessage_flow_2dmessages_2denriched_2eproto.base);
  srcaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sampleraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nexthop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcaddrencap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstaddrencap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cidstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcifname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcifdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstifname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstifdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protoname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remotecountry_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timereceived_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&srcifspeed_) -
      reinterpret_cast<char*>(&timereceived_)) + sizeof(srcifspeed_));
}

FlowMessage::~FlowMessage() {
  // @@protoc_insertion_point(destructor:flowmessageenriched.FlowMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlowMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  srcaddr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstaddr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sampleraddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nexthop_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcaddrencap_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstaddrencap_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cidstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcifname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  srcifdesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstifname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dstifdesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protoname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remotecountry_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FlowMessage::ArenaDtor(void* object) {
  FlowMessage* _this = reinterpret_cast< FlowMessage* >(object);
  (void)_this;
}
void FlowMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowMessage& FlowMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowMessage_flow_2dmessages_2denriched_2eproto.base);
  return *internal_default_instance();
}


void FlowMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flowmessageenriched.FlowMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srcaddr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstaddr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sampleraddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nexthop_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srcaddrencap_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstaddrencap_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cidstring_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srcifname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srcifdesc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstifname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstifdesc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  protoname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remotecountry_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&timereceived_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&srcifspeed_) -
      reinterpret_cast<char*>(&timereceived_)) + sizeof(srcifspeed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .flowmessageenriched.FlowMessage.FlowType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::flowmessageenriched::FlowMessage_FlowType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 TimeReceived = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timereceived_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 SamplingRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          samplingrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SequenceNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sequencenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 TimeFlowEnd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timeflowend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes SrcAddr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_srcaddr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes DstAddr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_dstaddr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Bytes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Packets = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes SamplerAddress = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_sampleraddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes NextHop = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_nexthop();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 NextHopAS = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          nexthopas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SrcAS = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          srcas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 DstAS = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          dstas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SrcNet = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          srcnet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 DstNet = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          dstnet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 InIf = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          inif_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 OutIf = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          outif_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Proto = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SrcPort = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          srcport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 DstPort = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          dstport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 IPTos = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          iptos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ForwardingStatus = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          forwardingstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 IPTTL = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ipttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 TCPFlags = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          tcpflags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 SrcMac = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          srcmac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 DstMac = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          dstmac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 VlanId = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          vlanid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Etype = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          etype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 IcmpType = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          icmptype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 IcmpCode = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          icmpcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SrcVlan = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          srcvlan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 DstVlan = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dstvlan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 FragmentId = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fragmentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 FragmentOffset = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fragmentoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 IPv6FlowLabel = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ipv6flowlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 TimeFlowStart = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          timeflowstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 IngressVrfID = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ingressvrfid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 EgressVrfID = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          egressvrfid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 BiFlowDirection = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          biflowdirection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 FlowDirection = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          flowdirection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HasEncap = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          hasencap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes SrcAddrEncap = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_srcaddrencap();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes DstAddrEncap = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_dstaddrencap();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ProtoEncap = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          protoencap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 EtypeEncap = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          etypeencap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 IPTosEncap = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          iptosencap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 IPTTLEncap = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ipttlencap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 IPv6FlowLabelEncap = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ipv6flowlabelencap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 FragmentIdEncap = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          fragmentidencap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 FragmentOffsetEncap = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          fragmentoffsetencap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HasMPLS = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          hasmpls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MPLSCount = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          mplscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MPLS1TTL = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          mpls1ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MPLS1Label = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          mpls1label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MPLS2TTL = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          mpls2ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MPLS2Label = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          mpls2label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MPLS3TTL = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          mpls3ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MPLS3Label = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          mpls3label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MPLSLastTTL = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          mplslastttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MPLSLastLabel = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          mplslastlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HasPPP = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          hasppp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 PPPAddressControl = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          pppaddresscontrol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Cid = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          cid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CidString = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_cidstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flowmessageenriched.FlowMessage.CidString"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .flowmessageenriched.FlowMessage.NormalizedType Normalized = 1002;
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_normalized(static_cast<::flowmessageenriched::FlowMessage_NormalizedType>(val));
        } else goto handle_unusual;
        continue;
      // string SrcIfName = 1003;
      case 1003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_srcifname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flowmessageenriched.FlowMessage.SrcIfName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SrcIfDesc = 1004;
      case 1004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_srcifdesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flowmessageenriched.FlowMessage.SrcIfDesc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SrcIfSpeed = 1005;
      case 1005:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          srcifspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string DstIfName = 1006;
      case 1006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_dstifname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flowmessageenriched.FlowMessage.DstIfName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string DstIfDesc = 1007;
      case 1007:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_dstifdesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flowmessageenriched.FlowMessage.DstIfDesc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 DstIfSpeed = 1008;
      case 1008:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          dstifspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ProtoName = 1009;
      case 1009:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_protoname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flowmessageenriched.FlowMessage.ProtoName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string RemoteCountry = 1010;
      case 1010:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_remotecountry();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "flowmessageenriched.FlowMessage.RemoteCountry"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:flowmessageenriched.FlowMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flowmessageenriched.FlowMessage.FlowType Type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint64 TimeReceived = 2;
  if (this->timereceived() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timereceived(), target);
  }

  // uint64 SamplingRate = 3;
  if (this->samplingrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_samplingrate(), target);
  }

  // uint32 SequenceNum = 4;
  if (this->sequencenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sequencenum(), target);
  }

  // uint64 TimeFlowEnd = 5;
  if (this->timeflowend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timeflowend(), target);
  }

  // bytes SrcAddr = 6;
  if (this->srcaddr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_srcaddr(), target);
  }

  // bytes DstAddr = 7;
  if (this->dstaddr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_dstaddr(), target);
  }

  // uint64 Bytes = 9;
  if (this->bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_bytes(), target);
  }

  // uint64 Packets = 10;
  if (this->packets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_packets(), target);
  }

  // bytes SamplerAddress = 11;
  if (this->sampleraddress().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_sampleraddress(), target);
  }

  // bytes NextHop = 12;
  if (this->nexthop().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_nexthop(), target);
  }

  // uint32 NextHopAS = 13;
  if (this->nexthopas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_nexthopas(), target);
  }

  // uint32 SrcAS = 14;
  if (this->srcas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_srcas(), target);
  }

  // uint32 DstAS = 15;
  if (this->dstas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_dstas(), target);
  }

  // uint32 SrcNet = 16;
  if (this->srcnet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_srcnet(), target);
  }

  // uint32 DstNet = 17;
  if (this->dstnet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_dstnet(), target);
  }

  // uint32 InIf = 18;
  if (this->inif() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_inif(), target);
  }

  // uint32 OutIf = 19;
  if (this->outif() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_outif(), target);
  }

  // uint32 Proto = 20;
  if (this->proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_proto(), target);
  }

  // uint32 SrcPort = 21;
  if (this->srcport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_srcport(), target);
  }

  // uint32 DstPort = 22;
  if (this->dstport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_dstport(), target);
  }

  // uint32 IPTos = 23;
  if (this->iptos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_iptos(), target);
  }

  // uint32 ForwardingStatus = 24;
  if (this->forwardingstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_forwardingstatus(), target);
  }

  // uint32 IPTTL = 25;
  if (this->ipttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_ipttl(), target);
  }

  // uint32 TCPFlags = 26;
  if (this->tcpflags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_tcpflags(), target);
  }

  // uint64 SrcMac = 27;
  if (this->srcmac() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(27, this->_internal_srcmac(), target);
  }

  // uint64 DstMac = 28;
  if (this->dstmac() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(28, this->_internal_dstmac(), target);
  }

  // uint32 VlanId = 29;
  if (this->vlanid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_vlanid(), target);
  }

  // uint32 Etype = 30;
  if (this->etype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_etype(), target);
  }

  // uint32 IcmpType = 31;
  if (this->icmptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_icmptype(), target);
  }

  // uint32 IcmpCode = 32;
  if (this->icmpcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_icmpcode(), target);
  }

  // uint32 SrcVlan = 33;
  if (this->srcvlan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_srcvlan(), target);
  }

  // uint32 DstVlan = 34;
  if (this->dstvlan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_dstvlan(), target);
  }

  // uint32 FragmentId = 35;
  if (this->fragmentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_fragmentid(), target);
  }

  // uint32 FragmentOffset = 36;
  if (this->fragmentoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_fragmentoffset(), target);
  }

  // uint32 IPv6FlowLabel = 37;
  if (this->ipv6flowlabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_ipv6flowlabel(), target);
  }

  // uint64 TimeFlowStart = 38;
  if (this->timeflowstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(38, this->_internal_timeflowstart(), target);
  }

  // uint32 IngressVrfID = 39;
  if (this->ingressvrfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_ingressvrfid(), target);
  }

  // uint32 EgressVrfID = 40;
  if (this->egressvrfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_egressvrfid(), target);
  }

  // uint32 BiFlowDirection = 41;
  if (this->biflowdirection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_biflowdirection(), target);
  }

  // uint32 FlowDirection = 42;
  if (this->flowdirection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_flowdirection(), target);
  }

  // bool HasEncap = 43;
  if (this->hasencap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_hasencap(), target);
  }

  // bytes SrcAddrEncap = 44;
  if (this->srcaddrencap().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        44, this->_internal_srcaddrencap(), target);
  }

  // bytes DstAddrEncap = 45;
  if (this->dstaddrencap().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        45, this->_internal_dstaddrencap(), target);
  }

  // uint32 ProtoEncap = 46;
  if (this->protoencap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(46, this->_internal_protoencap(), target);
  }

  // uint32 EtypeEncap = 47;
  if (this->etypeencap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(47, this->_internal_etypeencap(), target);
  }

  // uint32 IPTosEncap = 48;
  if (this->iptosencap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(48, this->_internal_iptosencap(), target);
  }

  // uint32 IPTTLEncap = 49;
  if (this->ipttlencap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_ipttlencap(), target);
  }

  // uint32 IPv6FlowLabelEncap = 50;
  if (this->ipv6flowlabelencap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_ipv6flowlabelencap(), target);
  }

  // uint32 FragmentIdEncap = 51;
  if (this->fragmentidencap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(51, this->_internal_fragmentidencap(), target);
  }

  // uint32 FragmentOffsetEncap = 52;
  if (this->fragmentoffsetencap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(52, this->_internal_fragmentoffsetencap(), target);
  }

  // bool HasMPLS = 53;
  if (this->hasmpls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(53, this->_internal_hasmpls(), target);
  }

  // uint32 MPLSCount = 54;
  if (this->mplscount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(54, this->_internal_mplscount(), target);
  }

  // uint32 MPLS1TTL = 55;
  if (this->mpls1ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(55, this->_internal_mpls1ttl(), target);
  }

  // uint32 MPLS1Label = 56;
  if (this->mpls1label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(56, this->_internal_mpls1label(), target);
  }

  // uint32 MPLS2TTL = 57;
  if (this->mpls2ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(57, this->_internal_mpls2ttl(), target);
  }

  // uint32 MPLS2Label = 58;
  if (this->mpls2label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(58, this->_internal_mpls2label(), target);
  }

  // uint32 MPLS3TTL = 59;
  if (this->mpls3ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(59, this->_internal_mpls3ttl(), target);
  }

  // uint32 MPLS3Label = 60;
  if (this->mpls3label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(60, this->_internal_mpls3label(), target);
  }

  // uint32 MPLSLastTTL = 61;
  if (this->mplslastttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(61, this->_internal_mplslastttl(), target);
  }

  // uint32 MPLSLastLabel = 62;
  if (this->mplslastlabel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(62, this->_internal_mplslastlabel(), target);
  }

  // bool HasPPP = 63;
  if (this->hasppp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(63, this->_internal_hasppp(), target);
  }

  // uint32 PPPAddressControl = 64;
  if (this->pppaddresscontrol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(64, this->_internal_pppaddresscontrol(), target);
  }

  // uint32 Cid = 1000;
  if (this->cid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1000, this->_internal_cid(), target);
  }

  // string CidString = 1001;
  if (this->cidstring().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cidstring().data(), static_cast<int>(this->_internal_cidstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.CidString");
    target = stream->WriteStringMaybeAliased(
        1001, this->_internal_cidstring(), target);
  }

  // .flowmessageenriched.FlowMessage.NormalizedType Normalized = 1002;
  if (this->normalized() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1002, this->_internal_normalized(), target);
  }

  // string SrcIfName = 1003;
  if (this->srcifname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcifname().data(), static_cast<int>(this->_internal_srcifname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.SrcIfName");
    target = stream->WriteStringMaybeAliased(
        1003, this->_internal_srcifname(), target);
  }

  // string SrcIfDesc = 1004;
  if (this->srcifdesc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcifdesc().data(), static_cast<int>(this->_internal_srcifdesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.SrcIfDesc");
    target = stream->WriteStringMaybeAliased(
        1004, this->_internal_srcifdesc(), target);
  }

  // uint32 SrcIfSpeed = 1005;
  if (this->srcifspeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1005, this->_internal_srcifspeed(), target);
  }

  // string DstIfName = 1006;
  if (this->dstifname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dstifname().data(), static_cast<int>(this->_internal_dstifname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.DstIfName");
    target = stream->WriteStringMaybeAliased(
        1006, this->_internal_dstifname(), target);
  }

  // string DstIfDesc = 1007;
  if (this->dstifdesc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dstifdesc().data(), static_cast<int>(this->_internal_dstifdesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.DstIfDesc");
    target = stream->WriteStringMaybeAliased(
        1007, this->_internal_dstifdesc(), target);
  }

  // uint32 DstIfSpeed = 1008;
  if (this->dstifspeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1008, this->_internal_dstifspeed(), target);
  }

  // string ProtoName = 1009;
  if (this->protoname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protoname().data(), static_cast<int>(this->_internal_protoname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.ProtoName");
    target = stream->WriteStringMaybeAliased(
        1009, this->_internal_protoname(), target);
  }

  // string RemoteCountry = 1010;
  if (this->remotecountry().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remotecountry().data(), static_cast<int>(this->_internal_remotecountry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.RemoteCountry");
    target = stream->WriteStringMaybeAliased(
        1010, this->_internal_remotecountry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flowmessageenriched.FlowMessage)
  return target;
}

size_t FlowMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flowmessageenriched.FlowMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes SrcAddr = 6;
  if (this->srcaddr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_srcaddr());
  }

  // bytes DstAddr = 7;
  if (this->dstaddr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dstaddr());
  }

  // bytes SamplerAddress = 11;
  if (this->sampleraddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sampleraddress());
  }

  // bytes NextHop = 12;
  if (this->nexthop().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nexthop());
  }

  // bytes SrcAddrEncap = 44;
  if (this->srcaddrencap().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_srcaddrencap());
  }

  // bytes DstAddrEncap = 45;
  if (this->dstaddrencap().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dstaddrencap());
  }

  // string CidString = 1001;
  if (this->cidstring().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cidstring());
  }

  // string SrcIfName = 1003;
  if (this->srcifname().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcifname());
  }

  // string SrcIfDesc = 1004;
  if (this->srcifdesc().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcifdesc());
  }

  // string DstIfName = 1006;
  if (this->dstifname().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstifname());
  }

  // string DstIfDesc = 1007;
  if (this->dstifdesc().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstifdesc());
  }

  // string ProtoName = 1009;
  if (this->protoname().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protoname());
  }

  // string RemoteCountry = 1010;
  if (this->remotecountry().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remotecountry());
  }

  // uint64 TimeReceived = 2;
  if (this->timereceived() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timereceived());
  }

  // .flowmessageenriched.FlowMessage.FlowType Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 SequenceNum = 4;
  if (this->sequencenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequencenum());
  }

  // uint64 SamplingRate = 3;
  if (this->samplingrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_samplingrate());
  }

  // uint64 TimeFlowEnd = 5;
  if (this->timeflowend() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timeflowend());
  }

  // uint64 Bytes = 9;
  if (this->bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bytes());
  }

  // uint64 Packets = 10;
  if (this->packets() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_packets());
  }

  // uint32 NextHopAS = 13;
  if (this->nexthopas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nexthopas());
  }

  // uint32 SrcAS = 14;
  if (this->srcas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_srcas());
  }

  // uint32 DstAS = 15;
  if (this->dstas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dstas());
  }

  // uint32 SrcNet = 16;
  if (this->srcnet() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_srcnet());
  }

  // uint32 DstNet = 17;
  if (this->dstnet() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dstnet());
  }

  // uint32 InIf = 18;
  if (this->inif() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_inif());
  }

  // uint32 OutIf = 19;
  if (this->outif() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_outif());
  }

  // uint32 Proto = 20;
  if (this->proto() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_proto());
  }

  // uint32 SrcPort = 21;
  if (this->srcport() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_srcport());
  }

  // uint32 DstPort = 22;
  if (this->dstport() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dstport());
  }

  // uint32 IPTos = 23;
  if (this->iptos() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iptos());
  }

  // uint32 ForwardingStatus = 24;
  if (this->forwardingstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_forwardingstatus());
  }

  // uint32 IPTTL = 25;
  if (this->ipttl() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ipttl());
  }

  // uint32 TCPFlags = 26;
  if (this->tcpflags() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tcpflags());
  }

  // uint64 SrcMac = 27;
  if (this->srcmac() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_srcmac());
  }

  // uint64 DstMac = 28;
  if (this->dstmac() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dstmac());
  }

  // uint32 VlanId = 29;
  if (this->vlanid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vlanid());
  }

  // uint32 Etype = 30;
  if (this->etype() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_etype());
  }

  // uint32 IcmpType = 31;
  if (this->icmptype() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_icmptype());
  }

  // uint32 IcmpCode = 32;
  if (this->icmpcode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_icmpcode());
  }

  // uint32 SrcVlan = 33;
  if (this->srcvlan() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_srcvlan());
  }

  // uint32 DstVlan = 34;
  if (this->dstvlan() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dstvlan());
  }

  // uint32 FragmentId = 35;
  if (this->fragmentid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fragmentid());
  }

  // uint32 FragmentOffset = 36;
  if (this->fragmentoffset() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fragmentoffset());
  }

  // uint64 TimeFlowStart = 38;
  if (this->timeflowstart() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timeflowstart());
  }

  // uint32 IPv6FlowLabel = 37;
  if (this->ipv6flowlabel() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ipv6flowlabel());
  }

  // uint32 IngressVrfID = 39;
  if (this->ingressvrfid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ingressvrfid());
  }

  // uint32 EgressVrfID = 40;
  if (this->egressvrfid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_egressvrfid());
  }

  // uint32 BiFlowDirection = 41;
  if (this->biflowdirection() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_biflowdirection());
  }

  // uint32 FlowDirection = 42;
  if (this->flowdirection() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flowdirection());
  }

  // uint32 ProtoEncap = 46;
  if (this->protoencap() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_protoencap());
  }

  // uint32 EtypeEncap = 47;
  if (this->etypeencap() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_etypeencap());
  }

  // uint32 IPTosEncap = 48;
  if (this->iptosencap() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iptosencap());
  }

  // uint32 IPTTLEncap = 49;
  if (this->ipttlencap() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ipttlencap());
  }

  // uint32 IPv6FlowLabelEncap = 50;
  if (this->ipv6flowlabelencap() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ipv6flowlabelencap());
  }

  // uint32 FragmentIdEncap = 51;
  if (this->fragmentidencap() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fragmentidencap());
  }

  // uint32 FragmentOffsetEncap = 52;
  if (this->fragmentoffsetencap() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fragmentoffsetencap());
  }

  // bool HasEncap = 43;
  if (this->hasencap() != 0) {
    total_size += 2 + 1;
  }

  // bool HasMPLS = 53;
  if (this->hasmpls() != 0) {
    total_size += 2 + 1;
  }

  // bool HasPPP = 63;
  if (this->hasppp() != 0) {
    total_size += 2 + 1;
  }

  // uint32 MPLSCount = 54;
  if (this->mplscount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mplscount());
  }

  // uint32 MPLS1TTL = 55;
  if (this->mpls1ttl() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mpls1ttl());
  }

  // uint32 MPLS1Label = 56;
  if (this->mpls1label() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mpls1label());
  }

  // uint32 MPLS2TTL = 57;
  if (this->mpls2ttl() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mpls2ttl());
  }

  // uint32 MPLS2Label = 58;
  if (this->mpls2label() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mpls2label());
  }

  // uint32 MPLS3TTL = 59;
  if (this->mpls3ttl() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mpls3ttl());
  }

  // uint32 MPLS3Label = 60;
  if (this->mpls3label() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mpls3label());
  }

  // uint32 MPLSLastTTL = 61;
  if (this->mplslastttl() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mplslastttl());
  }

  // uint32 MPLSLastLabel = 62;
  if (this->mplslastlabel() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mplslastlabel());
  }

  // uint32 DstIfSpeed = 1008;
  if (this->dstifspeed() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dstifspeed());
  }

  // uint32 PPPAddressControl = 64;
  if (this->pppaddresscontrol() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pppaddresscontrol());
  }

  // uint32 Cid = 1000;
  if (this->cid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cid());
  }

  // .flowmessageenriched.FlowMessage.NormalizedType Normalized = 1002;
  if (this->normalized() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_normalized());
  }

  // uint32 SrcIfSpeed = 1005;
  if (this->srcifspeed() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_srcifspeed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flowmessageenriched.FlowMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flowmessageenriched.FlowMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flowmessageenriched.FlowMessage)
    MergeFrom(*source);
  }
}

void FlowMessage::MergeFrom(const FlowMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flowmessageenriched.FlowMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.srcaddr().size() > 0) {
    _internal_set_srcaddr(from._internal_srcaddr());
  }
  if (from.dstaddr().size() > 0) {
    _internal_set_dstaddr(from._internal_dstaddr());
  }
  if (from.sampleraddress().size() > 0) {
    _internal_set_sampleraddress(from._internal_sampleraddress());
  }
  if (from.nexthop().size() > 0) {
    _internal_set_nexthop(from._internal_nexthop());
  }
  if (from.srcaddrencap().size() > 0) {
    _internal_set_srcaddrencap(from._internal_srcaddrencap());
  }
  if (from.dstaddrencap().size() > 0) {
    _internal_set_dstaddrencap(from._internal_dstaddrencap());
  }
  if (from.cidstring().size() > 0) {
    _internal_set_cidstring(from._internal_cidstring());
  }
  if (from.srcifname().size() > 0) {
    _internal_set_srcifname(from._internal_srcifname());
  }
  if (from.srcifdesc().size() > 0) {
    _internal_set_srcifdesc(from._internal_srcifdesc());
  }
  if (from.dstifname().size() > 0) {
    _internal_set_dstifname(from._internal_dstifname());
  }
  if (from.dstifdesc().size() > 0) {
    _internal_set_dstifdesc(from._internal_dstifdesc());
  }
  if (from.protoname().size() > 0) {
    _internal_set_protoname(from._internal_protoname());
  }
  if (from.remotecountry().size() > 0) {
    _internal_set_remotecountry(from._internal_remotecountry());
  }
  if (from.timereceived() != 0) {
    _internal_set_timereceived(from._internal_timereceived());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.sequencenum() != 0) {
    _internal_set_sequencenum(from._internal_sequencenum());
  }
  if (from.samplingrate() != 0) {
    _internal_set_samplingrate(from._internal_samplingrate());
  }
  if (from.timeflowend() != 0) {
    _internal_set_timeflowend(from._internal_timeflowend());
  }
  if (from.bytes() != 0) {
    _internal_set_bytes(from._internal_bytes());
  }
  if (from.packets() != 0) {
    _internal_set_packets(from._internal_packets());
  }
  if (from.nexthopas() != 0) {
    _internal_set_nexthopas(from._internal_nexthopas());
  }
  if (from.srcas() != 0) {
    _internal_set_srcas(from._internal_srcas());
  }
  if (from.dstas() != 0) {
    _internal_set_dstas(from._internal_dstas());
  }
  if (from.srcnet() != 0) {
    _internal_set_srcnet(from._internal_srcnet());
  }
  if (from.dstnet() != 0) {
    _internal_set_dstnet(from._internal_dstnet());
  }
  if (from.inif() != 0) {
    _internal_set_inif(from._internal_inif());
  }
  if (from.outif() != 0) {
    _internal_set_outif(from._internal_outif());
  }
  if (from.proto() != 0) {
    _internal_set_proto(from._internal_proto());
  }
  if (from.srcport() != 0) {
    _internal_set_srcport(from._internal_srcport());
  }
  if (from.dstport() != 0) {
    _internal_set_dstport(from._internal_dstport());
  }
  if (from.iptos() != 0) {
    _internal_set_iptos(from._internal_iptos());
  }
  if (from.forwardingstatus() != 0) {
    _internal_set_forwardingstatus(from._internal_forwardingstatus());
  }
  if (from.ipttl() != 0) {
    _internal_set_ipttl(from._internal_ipttl());
  }
  if (from.tcpflags() != 0) {
    _internal_set_tcpflags(from._internal_tcpflags());
  }
  if (from.srcmac() != 0) {
    _internal_set_srcmac(from._internal_srcmac());
  }
  if (from.dstmac() != 0) {
    _internal_set_dstmac(from._internal_dstmac());
  }
  if (from.vlanid() != 0) {
    _internal_set_vlanid(from._internal_vlanid());
  }
  if (from.etype() != 0) {
    _internal_set_etype(from._internal_etype());
  }
  if (from.icmptype() != 0) {
    _internal_set_icmptype(from._internal_icmptype());
  }
  if (from.icmpcode() != 0) {
    _internal_set_icmpcode(from._internal_icmpcode());
  }
  if (from.srcvlan() != 0) {
    _internal_set_srcvlan(from._internal_srcvlan());
  }
  if (from.dstvlan() != 0) {
    _internal_set_dstvlan(from._internal_dstvlan());
  }
  if (from.fragmentid() != 0) {
    _internal_set_fragmentid(from._internal_fragmentid());
  }
  if (from.fragmentoffset() != 0) {
    _internal_set_fragmentoffset(from._internal_fragmentoffset());
  }
  if (from.timeflowstart() != 0) {
    _internal_set_timeflowstart(from._internal_timeflowstart());
  }
  if (from.ipv6flowlabel() != 0) {
    _internal_set_ipv6flowlabel(from._internal_ipv6flowlabel());
  }
  if (from.ingressvrfid() != 0) {
    _internal_set_ingressvrfid(from._internal_ingressvrfid());
  }
  if (from.egressvrfid() != 0) {
    _internal_set_egressvrfid(from._internal_egressvrfid());
  }
  if (from.biflowdirection() != 0) {
    _internal_set_biflowdirection(from._internal_biflowdirection());
  }
  if (from.flowdirection() != 0) {
    _internal_set_flowdirection(from._internal_flowdirection());
  }
  if (from.protoencap() != 0) {
    _internal_set_protoencap(from._internal_protoencap());
  }
  if (from.etypeencap() != 0) {
    _internal_set_etypeencap(from._internal_etypeencap());
  }
  if (from.iptosencap() != 0) {
    _internal_set_iptosencap(from._internal_iptosencap());
  }
  if (from.ipttlencap() != 0) {
    _internal_set_ipttlencap(from._internal_ipttlencap());
  }
  if (from.ipv6flowlabelencap() != 0) {
    _internal_set_ipv6flowlabelencap(from._internal_ipv6flowlabelencap());
  }
  if (from.fragmentidencap() != 0) {
    _internal_set_fragmentidencap(from._internal_fragmentidencap());
  }
  if (from.fragmentoffsetencap() != 0) {
    _internal_set_fragmentoffsetencap(from._internal_fragmentoffsetencap());
  }
  if (from.hasencap() != 0) {
    _internal_set_hasencap(from._internal_hasencap());
  }
  if (from.hasmpls() != 0) {
    _internal_set_hasmpls(from._internal_hasmpls());
  }
  if (from.hasppp() != 0) {
    _internal_set_hasppp(from._internal_hasppp());
  }
  if (from.mplscount() != 0) {
    _internal_set_mplscount(from._internal_mplscount());
  }
  if (from.mpls1ttl() != 0) {
    _internal_set_mpls1ttl(from._internal_mpls1ttl());
  }
  if (from.mpls1label() != 0) {
    _internal_set_mpls1label(from._internal_mpls1label());
  }
  if (from.mpls2ttl() != 0) {
    _internal_set_mpls2ttl(from._internal_mpls2ttl());
  }
  if (from.mpls2label() != 0) {
    _internal_set_mpls2label(from._internal_mpls2label());
  }
  if (from.mpls3ttl() != 0) {
    _internal_set_mpls3ttl(from._internal_mpls3ttl());
  }
  if (from.mpls3label() != 0) {
    _internal_set_mpls3label(from._internal_mpls3label());
  }
  if (from.mplslastttl() != 0) {
    _internal_set_mplslastttl(from._internal_mplslastttl());
  }
  if (from.mplslastlabel() != 0) {
    _internal_set_mplslastlabel(from._internal_mplslastlabel());
  }
  if (from.dstifspeed() != 0) {
    _internal_set_dstifspeed(from._internal_dstifspeed());
  }
  if (from.pppaddresscontrol() != 0) {
    _internal_set_pppaddresscontrol(from._internal_pppaddresscontrol());
  }
  if (from.cid() != 0) {
    _internal_set_cid(from._internal_cid());
  }
  if (from.normalized() != 0) {
    _internal_set_normalized(from._internal_normalized());
  }
  if (from.srcifspeed() != 0) {
    _internal_set_srcifspeed(from._internal_srcifspeed());
  }
}

void FlowMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flowmessageenriched.FlowMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowMessage::CopyFrom(const FlowMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flowmessageenriched.FlowMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowMessage::IsInitialized() const {
  return true;
}

void FlowMessage::InternalSwap(FlowMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  srcaddr_.Swap(&other->srcaddr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstaddr_.Swap(&other->dstaddr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sampleraddress_.Swap(&other->sampleraddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nexthop_.Swap(&other->nexthop_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srcaddrencap_.Swap(&other->srcaddrencap_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstaddrencap_.Swap(&other->dstaddrencap_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cidstring_.Swap(&other->cidstring_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srcifname_.Swap(&other->srcifname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  srcifdesc_.Swap(&other->srcifdesc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstifname_.Swap(&other->dstifname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dstifdesc_.Swap(&other->dstifdesc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  protoname_.Swap(&other->protoname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remotecountry_.Swap(&other->remotecountry_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowMessage, srcifspeed_)
      + sizeof(FlowMessage::srcifspeed_)
      - PROTOBUF_FIELD_OFFSET(FlowMessage, timereceived_)>(
          reinterpret_cast<char*>(&timereceived_),
          reinterpret_cast<char*>(&other->timereceived_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace flowmessageenriched
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flowmessageenriched::FlowMessage* Arena::CreateMaybeMessage< ::flowmessageenriched::FlowMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flowmessageenriched::FlowMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
