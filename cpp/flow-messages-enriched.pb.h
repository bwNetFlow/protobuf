// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow-messages-enriched.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flow_2dmessages_2denriched_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flow_2dmessages_2denriched_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flow_2dmessages_2denriched_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flow_2dmessages_2denriched_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flow_2dmessages_2denriched_2eproto;
namespace flowmessageenriched {
class FlowMessage;
struct FlowMessageDefaultTypeInternal;
extern FlowMessageDefaultTypeInternal _FlowMessage_default_instance_;
}  // namespace flowmessageenriched
PROTOBUF_NAMESPACE_OPEN
template<> ::flowmessageenriched::FlowMessage* Arena::CreateMaybeMessage<::flowmessageenriched::FlowMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flowmessageenriched {

enum FlowMessage_FlowType : int {
  FlowMessage_FlowType_FLOWUNKNOWN = 0,
  FlowMessage_FlowType_SFLOW_5 = 1,
  FlowMessage_FlowType_NETFLOW_V5 = 2,
  FlowMessage_FlowType_NETFLOW_V9 = 3,
  FlowMessage_FlowType_IPFIX = 4,
  FlowMessage_FlowType_FlowMessage_FlowType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FlowMessage_FlowType_FlowMessage_FlowType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FlowMessage_FlowType_IsValid(int value);
constexpr FlowMessage_FlowType FlowMessage_FlowType_FlowType_MIN = FlowMessage_FlowType_FLOWUNKNOWN;
constexpr FlowMessage_FlowType FlowMessage_FlowType_FlowType_MAX = FlowMessage_FlowType_IPFIX;
constexpr int FlowMessage_FlowType_FlowType_ARRAYSIZE = FlowMessage_FlowType_FlowType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlowMessage_FlowType_descriptor();
template<typename T>
inline const std::string& FlowMessage_FlowType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FlowMessage_FlowType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FlowMessage_FlowType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FlowMessage_FlowType_descriptor(), enum_t_value);
}
inline bool FlowMessage_FlowType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FlowMessage_FlowType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FlowMessage_FlowType>(
    FlowMessage_FlowType_descriptor(), name, value);
}
enum FlowMessage_NormalizedType : int {
  FlowMessage_NormalizedType_No = 0,
  FlowMessage_NormalizedType_Yes = 1,
  FlowMessage_NormalizedType_FlowMessage_NormalizedType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FlowMessage_NormalizedType_FlowMessage_NormalizedType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FlowMessage_NormalizedType_IsValid(int value);
constexpr FlowMessage_NormalizedType FlowMessage_NormalizedType_NormalizedType_MIN = FlowMessage_NormalizedType_No;
constexpr FlowMessage_NormalizedType FlowMessage_NormalizedType_NormalizedType_MAX = FlowMessage_NormalizedType_Yes;
constexpr int FlowMessage_NormalizedType_NormalizedType_ARRAYSIZE = FlowMessage_NormalizedType_NormalizedType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlowMessage_NormalizedType_descriptor();
template<typename T>
inline const std::string& FlowMessage_NormalizedType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FlowMessage_NormalizedType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FlowMessage_NormalizedType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FlowMessage_NormalizedType_descriptor(), enum_t_value);
}
inline bool FlowMessage_NormalizedType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FlowMessage_NormalizedType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FlowMessage_NormalizedType>(
    FlowMessage_NormalizedType_descriptor(), name, value);
}
enum FlowMessage_RemoteAddrType : int {
  FlowMessage_RemoteAddrType_Neither = 0,
  FlowMessage_RemoteAddrType_Src = 1,
  FlowMessage_RemoteAddrType_Dst = 2,
  FlowMessage_RemoteAddrType_FlowMessage_RemoteAddrType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FlowMessage_RemoteAddrType_FlowMessage_RemoteAddrType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FlowMessage_RemoteAddrType_IsValid(int value);
constexpr FlowMessage_RemoteAddrType FlowMessage_RemoteAddrType_RemoteAddrType_MIN = FlowMessage_RemoteAddrType_Neither;
constexpr FlowMessage_RemoteAddrType FlowMessage_RemoteAddrType_RemoteAddrType_MAX = FlowMessage_RemoteAddrType_Dst;
constexpr int FlowMessage_RemoteAddrType_RemoteAddrType_ARRAYSIZE = FlowMessage_RemoteAddrType_RemoteAddrType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlowMessage_RemoteAddrType_descriptor();
template<typename T>
inline const std::string& FlowMessage_RemoteAddrType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FlowMessage_RemoteAddrType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FlowMessage_RemoteAddrType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FlowMessage_RemoteAddrType_descriptor(), enum_t_value);
}
inline bool FlowMessage_RemoteAddrType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FlowMessage_RemoteAddrType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FlowMessage_RemoteAddrType>(
    FlowMessage_RemoteAddrType_descriptor(), name, value);
}
// ===================================================================

class FlowMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flowmessageenriched.FlowMessage) */ {
 public:
  inline FlowMessage() : FlowMessage(nullptr) {}
  ~FlowMessage() override;
  explicit constexpr FlowMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlowMessage(const FlowMessage& from);
  FlowMessage(FlowMessage&& from) noexcept
    : FlowMessage() {
    *this = ::std::move(from);
  }

  inline FlowMessage& operator=(const FlowMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowMessage& operator=(FlowMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlowMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlowMessage* internal_default_instance() {
    return reinterpret_cast<const FlowMessage*>(
               &_FlowMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FlowMessage& a, FlowMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowMessage* New() const final {
    return new FlowMessage();
  }

  FlowMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlowMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FlowMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flowmessageenriched.FlowMessage";
  }
  protected:
  explicit FlowMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FlowMessage_FlowType FlowType;
  static constexpr FlowType FLOWUNKNOWN =
    FlowMessage_FlowType_FLOWUNKNOWN;
  static constexpr FlowType SFLOW_5 =
    FlowMessage_FlowType_SFLOW_5;
  static constexpr FlowType NETFLOW_V5 =
    FlowMessage_FlowType_NETFLOW_V5;
  static constexpr FlowType NETFLOW_V9 =
    FlowMessage_FlowType_NETFLOW_V9;
  static constexpr FlowType IPFIX =
    FlowMessage_FlowType_IPFIX;
  static inline bool FlowType_IsValid(int value) {
    return FlowMessage_FlowType_IsValid(value);
  }
  static constexpr FlowType FlowType_MIN =
    FlowMessage_FlowType_FlowType_MIN;
  static constexpr FlowType FlowType_MAX =
    FlowMessage_FlowType_FlowType_MAX;
  static constexpr int FlowType_ARRAYSIZE =
    FlowMessage_FlowType_FlowType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FlowType_descriptor() {
    return FlowMessage_FlowType_descriptor();
  }
  template<typename T>
  static inline const std::string& FlowType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FlowType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FlowType_Name.");
    return FlowMessage_FlowType_Name(enum_t_value);
  }
  static inline bool FlowType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FlowType* value) {
    return FlowMessage_FlowType_Parse(name, value);
  }

  typedef FlowMessage_NormalizedType NormalizedType;
  static constexpr NormalizedType No =
    FlowMessage_NormalizedType_No;
  static constexpr NormalizedType Yes =
    FlowMessage_NormalizedType_Yes;
  static inline bool NormalizedType_IsValid(int value) {
    return FlowMessage_NormalizedType_IsValid(value);
  }
  static constexpr NormalizedType NormalizedType_MIN =
    FlowMessage_NormalizedType_NormalizedType_MIN;
  static constexpr NormalizedType NormalizedType_MAX =
    FlowMessage_NormalizedType_NormalizedType_MAX;
  static constexpr int NormalizedType_ARRAYSIZE =
    FlowMessage_NormalizedType_NormalizedType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NormalizedType_descriptor() {
    return FlowMessage_NormalizedType_descriptor();
  }
  template<typename T>
  static inline const std::string& NormalizedType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NormalizedType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NormalizedType_Name.");
    return FlowMessage_NormalizedType_Name(enum_t_value);
  }
  static inline bool NormalizedType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NormalizedType* value) {
    return FlowMessage_NormalizedType_Parse(name, value);
  }

  typedef FlowMessage_RemoteAddrType RemoteAddrType;
  static constexpr RemoteAddrType Neither =
    FlowMessage_RemoteAddrType_Neither;
  static constexpr RemoteAddrType Src =
    FlowMessage_RemoteAddrType_Src;
  static constexpr RemoteAddrType Dst =
    FlowMessage_RemoteAddrType_Dst;
  static inline bool RemoteAddrType_IsValid(int value) {
    return FlowMessage_RemoteAddrType_IsValid(value);
  }
  static constexpr RemoteAddrType RemoteAddrType_MIN =
    FlowMessage_RemoteAddrType_RemoteAddrType_MIN;
  static constexpr RemoteAddrType RemoteAddrType_MAX =
    FlowMessage_RemoteAddrType_RemoteAddrType_MAX;
  static constexpr int RemoteAddrType_ARRAYSIZE =
    FlowMessage_RemoteAddrType_RemoteAddrType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RemoteAddrType_descriptor() {
    return FlowMessage_RemoteAddrType_descriptor();
  }
  template<typename T>
  static inline const std::string& RemoteAddrType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RemoteAddrType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RemoteAddrType_Name.");
    return FlowMessage_RemoteAddrType_Name(enum_t_value);
  }
  static inline bool RemoteAddrType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RemoteAddrType* value) {
    return FlowMessage_RemoteAddrType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSrcAddrFieldNumber = 6,
    kDstAddrFieldNumber = 7,
    kSamplerAddressFieldNumber = 11,
    kNextHopFieldNumber = 12,
    kCidStringFieldNumber = 1001,
    kSrcIfNameFieldNumber = 1003,
    kSrcIfDescFieldNumber = 1004,
    kDstIfNameFieldNumber = 1006,
    kDstIfDescFieldNumber = 1007,
    kProtoNameFieldNumber = 1009,
    kRemoteCountryFieldNumber = 1010,
    kNoteFieldNumber = 1014,
    kTimeReceivedFieldNumber = 2,
    kTypeFieldNumber = 1,
    kSequenceNumFieldNumber = 4,
    kSamplingRateFieldNumber = 3,
    kTimeFlowEndFieldNumber = 5,
    kBytesFieldNumber = 9,
    kPacketsFieldNumber = 10,
    kNextHopASFieldNumber = 13,
    kSrcASFieldNumber = 14,
    kDstASFieldNumber = 15,
    kSrcNetFieldNumber = 16,
    kDstNetFieldNumber = 17,
    kInIfFieldNumber = 18,
    kOutIfFieldNumber = 19,
    kProtoFieldNumber = 20,
    kSrcPortFieldNumber = 21,
    kDstPortFieldNumber = 22,
    kIPTosFieldNumber = 23,
    kForwardingStatusFieldNumber = 24,
    kIPTTLFieldNumber = 25,
    kTCPFlagsFieldNumber = 26,
    kSrcMacFieldNumber = 27,
    kDstMacFieldNumber = 28,
    kVlanIdFieldNumber = 29,
    kEtypeFieldNumber = 30,
    kIcmpTypeFieldNumber = 31,
    kIcmpCodeFieldNumber = 32,
    kSrcVlanFieldNumber = 33,
    kDstVlanFieldNumber = 34,
    kFragmentIdFieldNumber = 35,
    kFragmentOffsetFieldNumber = 36,
    kTimeFlowStartFieldNumber = 38,
    kIPv6FlowLabelFieldNumber = 37,
    kIngressVrfIDFieldNumber = 39,
    kEgressVrfIDFieldNumber = 40,
    kBiFlowDirectionFieldNumber = 41,
    kFlowDirectionFieldNumber = 42,
    kHasMPLSFieldNumber = 53,
    kMPLSCountFieldNumber = 54,
    kMPLS1TTLFieldNumber = 55,
    kMPLS1LabelFieldNumber = 56,
    kMPLS2TTLFieldNumber = 57,
    kMPLS2LabelFieldNumber = 58,
    kMPLS3TTLFieldNumber = 59,
    kMPLS3LabelFieldNumber = 60,
    kMPLSLastTTLFieldNumber = 61,
    kMPLSLastLabelFieldNumber = 62,
    kCidFieldNumber = 1000,
    kNormalizedFieldNumber = 1002,
    kSrcIfSpeedFieldNumber = 1005,
    kDstIfSpeedFieldNumber = 1008,
    kRemoteAddrFieldNumber = 1011,
    kSrcCidFieldNumber = 1012,
    kDstCidFieldNumber = 1013,
  };
  // bytes SrcAddr = 6;
  void clear_srcaddr();
  const std::string& srcaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srcaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srcaddr();
  PROTOBUF_MUST_USE_RESULT std::string* release_srcaddr();
  void set_allocated_srcaddr(std::string* srcaddr);
  private:
  const std::string& _internal_srcaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srcaddr(const std::string& value);
  std::string* _internal_mutable_srcaddr();
  public:

  // bytes DstAddr = 7;
  void clear_dstaddr();
  const std::string& dstaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dstaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dstaddr();
  PROTOBUF_MUST_USE_RESULT std::string* release_dstaddr();
  void set_allocated_dstaddr(std::string* dstaddr);
  private:
  const std::string& _internal_dstaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dstaddr(const std::string& value);
  std::string* _internal_mutable_dstaddr();
  public:

  // bytes SamplerAddress = 11;
  void clear_sampleraddress();
  const std::string& sampleraddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sampleraddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sampleraddress();
  PROTOBUF_MUST_USE_RESULT std::string* release_sampleraddress();
  void set_allocated_sampleraddress(std::string* sampleraddress);
  private:
  const std::string& _internal_sampleraddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sampleraddress(const std::string& value);
  std::string* _internal_mutable_sampleraddress();
  public:

  // bytes NextHop = 12;
  void clear_nexthop();
  const std::string& nexthop() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nexthop(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nexthop();
  PROTOBUF_MUST_USE_RESULT std::string* release_nexthop();
  void set_allocated_nexthop(std::string* nexthop);
  private:
  const std::string& _internal_nexthop() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nexthop(const std::string& value);
  std::string* _internal_mutable_nexthop();
  public:

  // string CidString = 1001;
  void clear_cidstring();
  const std::string& cidstring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cidstring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cidstring();
  PROTOBUF_MUST_USE_RESULT std::string* release_cidstring();
  void set_allocated_cidstring(std::string* cidstring);
  private:
  const std::string& _internal_cidstring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cidstring(const std::string& value);
  std::string* _internal_mutable_cidstring();
  public:

  // string SrcIfName = 1003;
  void clear_srcifname();
  const std::string& srcifname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srcifname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srcifname();
  PROTOBUF_MUST_USE_RESULT std::string* release_srcifname();
  void set_allocated_srcifname(std::string* srcifname);
  private:
  const std::string& _internal_srcifname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srcifname(const std::string& value);
  std::string* _internal_mutable_srcifname();
  public:

  // string SrcIfDesc = 1004;
  void clear_srcifdesc();
  const std::string& srcifdesc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srcifdesc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srcifdesc();
  PROTOBUF_MUST_USE_RESULT std::string* release_srcifdesc();
  void set_allocated_srcifdesc(std::string* srcifdesc);
  private:
  const std::string& _internal_srcifdesc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srcifdesc(const std::string& value);
  std::string* _internal_mutable_srcifdesc();
  public:

  // string DstIfName = 1006;
  void clear_dstifname();
  const std::string& dstifname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dstifname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dstifname();
  PROTOBUF_MUST_USE_RESULT std::string* release_dstifname();
  void set_allocated_dstifname(std::string* dstifname);
  private:
  const std::string& _internal_dstifname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dstifname(const std::string& value);
  std::string* _internal_mutable_dstifname();
  public:

  // string DstIfDesc = 1007;
  void clear_dstifdesc();
  const std::string& dstifdesc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dstifdesc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dstifdesc();
  PROTOBUF_MUST_USE_RESULT std::string* release_dstifdesc();
  void set_allocated_dstifdesc(std::string* dstifdesc);
  private:
  const std::string& _internal_dstifdesc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dstifdesc(const std::string& value);
  std::string* _internal_mutable_dstifdesc();
  public:

  // string ProtoName = 1009;
  void clear_protoname();
  const std::string& protoname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_protoname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_protoname();
  PROTOBUF_MUST_USE_RESULT std::string* release_protoname();
  void set_allocated_protoname(std::string* protoname);
  private:
  const std::string& _internal_protoname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protoname(const std::string& value);
  std::string* _internal_mutable_protoname();
  public:

  // string RemoteCountry = 1010;
  void clear_remotecountry();
  const std::string& remotecountry() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remotecountry(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remotecountry();
  PROTOBUF_MUST_USE_RESULT std::string* release_remotecountry();
  void set_allocated_remotecountry(std::string* remotecountry);
  private:
  const std::string& _internal_remotecountry() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remotecountry(const std::string& value);
  std::string* _internal_mutable_remotecountry();
  public:

  // string Note = 1014;
  void clear_note();
  const std::string& note() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note();
  PROTOBUF_MUST_USE_RESULT std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  // uint64 TimeReceived = 2;
  void clear_timereceived();
  ::PROTOBUF_NAMESPACE_ID::uint64 timereceived() const;
  void set_timereceived(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timereceived() const;
  void _internal_set_timereceived(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .flowmessageenriched.FlowMessage.FlowType Type = 1;
  void clear_type();
  ::flowmessageenriched::FlowMessage_FlowType type() const;
  void set_type(::flowmessageenriched::FlowMessage_FlowType value);
  private:
  ::flowmessageenriched::FlowMessage_FlowType _internal_type() const;
  void _internal_set_type(::flowmessageenriched::FlowMessage_FlowType value);
  public:

  // uint32 SequenceNum = 4;
  void clear_sequencenum();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequencenum() const;
  void set_sequencenum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequencenum() const;
  void _internal_set_sequencenum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 SamplingRate = 3;
  void clear_samplingrate();
  ::PROTOBUF_NAMESPACE_ID::uint64 samplingrate() const;
  void set_samplingrate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_samplingrate() const;
  void _internal_set_samplingrate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 TimeFlowEnd = 5;
  void clear_timeflowend();
  ::PROTOBUF_NAMESPACE_ID::uint64 timeflowend() const;
  void set_timeflowend(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timeflowend() const;
  void _internal_set_timeflowend(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 Bytes = 9;
  void clear_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes() const;
  void set_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bytes() const;
  void _internal_set_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 Packets = 10;
  void clear_packets();
  ::PROTOBUF_NAMESPACE_ID::uint64 packets() const;
  void set_packets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_packets() const;
  void _internal_set_packets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 NextHopAS = 13;
  void clear_nexthopas();
  ::PROTOBUF_NAMESPACE_ID::uint32 nexthopas() const;
  void set_nexthopas(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nexthopas() const;
  void _internal_set_nexthopas(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 SrcAS = 14;
  void clear_srcas();
  ::PROTOBUF_NAMESPACE_ID::uint32 srcas() const;
  void set_srcas(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srcas() const;
  void _internal_set_srcas(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 DstAS = 15;
  void clear_dstas();
  ::PROTOBUF_NAMESPACE_ID::uint32 dstas() const;
  void set_dstas(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dstas() const;
  void _internal_set_dstas(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 SrcNet = 16;
  void clear_srcnet();
  ::PROTOBUF_NAMESPACE_ID::uint32 srcnet() const;
  void set_srcnet(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srcnet() const;
  void _internal_set_srcnet(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 DstNet = 17;
  void clear_dstnet();
  ::PROTOBUF_NAMESPACE_ID::uint32 dstnet() const;
  void set_dstnet(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dstnet() const;
  void _internal_set_dstnet(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 InIf = 18;
  void clear_inif();
  ::PROTOBUF_NAMESPACE_ID::uint32 inif() const;
  void set_inif(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inif() const;
  void _internal_set_inif(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 OutIf = 19;
  void clear_outif();
  ::PROTOBUF_NAMESPACE_ID::uint32 outif() const;
  void set_outif(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_outif() const;
  void _internal_set_outif(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Proto = 20;
  void clear_proto();
  ::PROTOBUF_NAMESPACE_ID::uint32 proto() const;
  void set_proto(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_proto() const;
  void _internal_set_proto(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 SrcPort = 21;
  void clear_srcport();
  ::PROTOBUF_NAMESPACE_ID::uint32 srcport() const;
  void set_srcport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srcport() const;
  void _internal_set_srcport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 DstPort = 22;
  void clear_dstport();
  ::PROTOBUF_NAMESPACE_ID::uint32 dstport() const;
  void set_dstport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dstport() const;
  void _internal_set_dstport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 IPTos = 23;
  void clear_iptos();
  ::PROTOBUF_NAMESPACE_ID::uint32 iptos() const;
  void set_iptos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iptos() const;
  void _internal_set_iptos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ForwardingStatus = 24;
  void clear_forwardingstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 forwardingstatus() const;
  void set_forwardingstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_forwardingstatus() const;
  void _internal_set_forwardingstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 IPTTL = 25;
  void clear_ipttl();
  ::PROTOBUF_NAMESPACE_ID::uint32 ipttl() const;
  void set_ipttl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ipttl() const;
  void _internal_set_ipttl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 TCPFlags = 26;
  void clear_tcpflags();
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpflags() const;
  void set_tcpflags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tcpflags() const;
  void _internal_set_tcpflags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 SrcMac = 27;
  void clear_srcmac();
  ::PROTOBUF_NAMESPACE_ID::uint64 srcmac() const;
  void set_srcmac(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_srcmac() const;
  void _internal_set_srcmac(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 DstMac = 28;
  void clear_dstmac();
  ::PROTOBUF_NAMESPACE_ID::uint64 dstmac() const;
  void set_dstmac(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dstmac() const;
  void _internal_set_dstmac(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 VlanId = 29;
  void clear_vlanid();
  ::PROTOBUF_NAMESPACE_ID::uint32 vlanid() const;
  void set_vlanid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vlanid() const;
  void _internal_set_vlanid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Etype = 30;
  void clear_etype();
  ::PROTOBUF_NAMESPACE_ID::uint32 etype() const;
  void set_etype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_etype() const;
  void _internal_set_etype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 IcmpType = 31;
  void clear_icmptype();
  ::PROTOBUF_NAMESPACE_ID::uint32 icmptype() const;
  void set_icmptype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_icmptype() const;
  void _internal_set_icmptype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 IcmpCode = 32;
  void clear_icmpcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 icmpcode() const;
  void set_icmpcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_icmpcode() const;
  void _internal_set_icmpcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 SrcVlan = 33;
  void clear_srcvlan();
  ::PROTOBUF_NAMESPACE_ID::uint32 srcvlan() const;
  void set_srcvlan(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srcvlan() const;
  void _internal_set_srcvlan(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 DstVlan = 34;
  void clear_dstvlan();
  ::PROTOBUF_NAMESPACE_ID::uint32 dstvlan() const;
  void set_dstvlan(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dstvlan() const;
  void _internal_set_dstvlan(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 FragmentId = 35;
  void clear_fragmentid();
  ::PROTOBUF_NAMESPACE_ID::uint32 fragmentid() const;
  void set_fragmentid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fragmentid() const;
  void _internal_set_fragmentid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 FragmentOffset = 36;
  void clear_fragmentoffset();
  ::PROTOBUF_NAMESPACE_ID::uint32 fragmentoffset() const;
  void set_fragmentoffset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fragmentoffset() const;
  void _internal_set_fragmentoffset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 TimeFlowStart = 38;
  void clear_timeflowstart();
  ::PROTOBUF_NAMESPACE_ID::uint64 timeflowstart() const;
  void set_timeflowstart(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timeflowstart() const;
  void _internal_set_timeflowstart(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 IPv6FlowLabel = 37;
  void clear_ipv6flowlabel();
  ::PROTOBUF_NAMESPACE_ID::uint32 ipv6flowlabel() const;
  void set_ipv6flowlabel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ipv6flowlabel() const;
  void _internal_set_ipv6flowlabel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 IngressVrfID = 39;
  void clear_ingressvrfid();
  ::PROTOBUF_NAMESPACE_ID::uint32 ingressvrfid() const;
  void set_ingressvrfid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ingressvrfid() const;
  void _internal_set_ingressvrfid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 EgressVrfID = 40;
  void clear_egressvrfid();
  ::PROTOBUF_NAMESPACE_ID::uint32 egressvrfid() const;
  void set_egressvrfid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_egressvrfid() const;
  void _internal_set_egressvrfid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 BiFlowDirection = 41;
  void clear_biflowdirection();
  ::PROTOBUF_NAMESPACE_ID::uint32 biflowdirection() const;
  void set_biflowdirection(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_biflowdirection() const;
  void _internal_set_biflowdirection(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 FlowDirection = 42;
  void clear_flowdirection();
  ::PROTOBUF_NAMESPACE_ID::uint32 flowdirection() const;
  void set_flowdirection(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flowdirection() const;
  void _internal_set_flowdirection(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool HasMPLS = 53;
  void clear_hasmpls();
  bool hasmpls() const;
  void set_hasmpls(bool value);
  private:
  bool _internal_hasmpls() const;
  void _internal_set_hasmpls(bool value);
  public:

  // uint32 MPLSCount = 54;
  void clear_mplscount();
  ::PROTOBUF_NAMESPACE_ID::uint32 mplscount() const;
  void set_mplscount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mplscount() const;
  void _internal_set_mplscount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MPLS1TTL = 55;
  void clear_mpls1ttl();
  ::PROTOBUF_NAMESPACE_ID::uint32 mpls1ttl() const;
  void set_mpls1ttl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mpls1ttl() const;
  void _internal_set_mpls1ttl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MPLS1Label = 56;
  void clear_mpls1label();
  ::PROTOBUF_NAMESPACE_ID::uint32 mpls1label() const;
  void set_mpls1label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mpls1label() const;
  void _internal_set_mpls1label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MPLS2TTL = 57;
  void clear_mpls2ttl();
  ::PROTOBUF_NAMESPACE_ID::uint32 mpls2ttl() const;
  void set_mpls2ttl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mpls2ttl() const;
  void _internal_set_mpls2ttl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MPLS2Label = 58;
  void clear_mpls2label();
  ::PROTOBUF_NAMESPACE_ID::uint32 mpls2label() const;
  void set_mpls2label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mpls2label() const;
  void _internal_set_mpls2label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MPLS3TTL = 59;
  void clear_mpls3ttl();
  ::PROTOBUF_NAMESPACE_ID::uint32 mpls3ttl() const;
  void set_mpls3ttl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mpls3ttl() const;
  void _internal_set_mpls3ttl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MPLS3Label = 60;
  void clear_mpls3label();
  ::PROTOBUF_NAMESPACE_ID::uint32 mpls3label() const;
  void set_mpls3label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mpls3label() const;
  void _internal_set_mpls3label(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MPLSLastTTL = 61;
  void clear_mplslastttl();
  ::PROTOBUF_NAMESPACE_ID::uint32 mplslastttl() const;
  void set_mplslastttl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mplslastttl() const;
  void _internal_set_mplslastttl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MPLSLastLabel = 62;
  void clear_mplslastlabel();
  ::PROTOBUF_NAMESPACE_ID::uint32 mplslastlabel() const;
  void set_mplslastlabel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mplslastlabel() const;
  void _internal_set_mplslastlabel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Cid = 1000;
  void clear_cid();
  ::PROTOBUF_NAMESPACE_ID::uint32 cid() const;
  void set_cid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cid() const;
  void _internal_set_cid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .flowmessageenriched.FlowMessage.NormalizedType Normalized = 1002;
  void clear_normalized();
  ::flowmessageenriched::FlowMessage_NormalizedType normalized() const;
  void set_normalized(::flowmessageenriched::FlowMessage_NormalizedType value);
  private:
  ::flowmessageenriched::FlowMessage_NormalizedType _internal_normalized() const;
  void _internal_set_normalized(::flowmessageenriched::FlowMessage_NormalizedType value);
  public:

  // uint32 SrcIfSpeed = 1005;
  void clear_srcifspeed();
  ::PROTOBUF_NAMESPACE_ID::uint32 srcifspeed() const;
  void set_srcifspeed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srcifspeed() const;
  void _internal_set_srcifspeed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 DstIfSpeed = 1008;
  void clear_dstifspeed();
  ::PROTOBUF_NAMESPACE_ID::uint32 dstifspeed() const;
  void set_dstifspeed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dstifspeed() const;
  void _internal_set_dstifspeed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .flowmessageenriched.FlowMessage.RemoteAddrType RemoteAddr = 1011;
  void clear_remoteaddr();
  ::flowmessageenriched::FlowMessage_RemoteAddrType remoteaddr() const;
  void set_remoteaddr(::flowmessageenriched::FlowMessage_RemoteAddrType value);
  private:
  ::flowmessageenriched::FlowMessage_RemoteAddrType _internal_remoteaddr() const;
  void _internal_set_remoteaddr(::flowmessageenriched::FlowMessage_RemoteAddrType value);
  public:

  // uint32 SrcCid = 1012;
  void clear_srccid();
  ::PROTOBUF_NAMESPACE_ID::uint32 srccid() const;
  void set_srccid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srccid() const;
  void _internal_set_srccid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 DstCid = 1013;
  void clear_dstcid();
  ::PROTOBUF_NAMESPACE_ID::uint32 dstcid() const;
  void set_dstcid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dstcid() const;
  void _internal_set_dstcid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:flowmessageenriched.FlowMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcaddr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstaddr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sampleraddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nexthop_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cidstring_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcifname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcifdesc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstifname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstifdesc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protoname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remotecountry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timereceived_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequencenum_;
  ::PROTOBUF_NAMESPACE_ID::uint64 samplingrate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timeflowend_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 packets_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nexthopas_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srcas_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dstas_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srcnet_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dstnet_;
  ::PROTOBUF_NAMESPACE_ID::uint32 inif_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outif_;
  ::PROTOBUF_NAMESPACE_ID::uint32 proto_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srcport_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dstport_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iptos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 forwardingstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ipttl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tcpflags_;
  ::PROTOBUF_NAMESPACE_ID::uint64 srcmac_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dstmac_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vlanid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 etype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 icmptype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 icmpcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srcvlan_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dstvlan_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fragmentid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fragmentoffset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timeflowstart_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ipv6flowlabel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ingressvrfid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 egressvrfid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 biflowdirection_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flowdirection_;
  bool hasmpls_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mplscount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mpls1ttl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mpls1label_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mpls2ttl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mpls2label_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mpls3ttl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mpls3label_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mplslastttl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mplslastlabel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cid_;
  int normalized_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srcifspeed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dstifspeed_;
  int remoteaddr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srccid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dstcid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_2dmessages_2denriched_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FlowMessage

// .flowmessageenriched.FlowMessage.FlowType Type = 1;
inline void FlowMessage::clear_type() {
  type_ = 0;
}
inline ::flowmessageenriched::FlowMessage_FlowType FlowMessage::_internal_type() const {
  return static_cast< ::flowmessageenriched::FlowMessage_FlowType >(type_);
}
inline ::flowmessageenriched::FlowMessage_FlowType FlowMessage::type() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.Type)
  return _internal_type();
}
inline void FlowMessage::_internal_set_type(::flowmessageenriched::FlowMessage_FlowType value) {
  
  type_ = value;
}
inline void FlowMessage::set_type(::flowmessageenriched::FlowMessage_FlowType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.Type)
}

// uint64 TimeReceived = 2;
inline void FlowMessage::clear_timereceived() {
  timereceived_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowMessage::_internal_timereceived() const {
  return timereceived_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowMessage::timereceived() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.TimeReceived)
  return _internal_timereceived();
}
inline void FlowMessage::_internal_set_timereceived(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timereceived_ = value;
}
inline void FlowMessage::set_timereceived(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timereceived(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.TimeReceived)
}

// uint32 SequenceNum = 4;
inline void FlowMessage::clear_sequencenum() {
  sequencenum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_sequencenum() const {
  return sequencenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::sequencenum() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SequenceNum)
  return _internal_sequencenum();
}
inline void FlowMessage::_internal_set_sequencenum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequencenum_ = value;
}
inline void FlowMessage::set_sequencenum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequencenum(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SequenceNum)
}

// uint64 SamplingRate = 3;
inline void FlowMessage::clear_samplingrate() {
  samplingrate_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowMessage::_internal_samplingrate() const {
  return samplingrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowMessage::samplingrate() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SamplingRate)
  return _internal_samplingrate();
}
inline void FlowMessage::_internal_set_samplingrate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  samplingrate_ = value;
}
inline void FlowMessage::set_samplingrate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_samplingrate(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SamplingRate)
}

// uint32 FlowDirection = 42;
inline void FlowMessage::clear_flowdirection() {
  flowdirection_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_flowdirection() const {
  return flowdirection_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::flowdirection() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.FlowDirection)
  return _internal_flowdirection();
}
inline void FlowMessage::_internal_set_flowdirection(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flowdirection_ = value;
}
inline void FlowMessage::set_flowdirection(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flowdirection(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.FlowDirection)
}

// bytes SamplerAddress = 11;
inline void FlowMessage::clear_sampleraddress() {
  sampleraddress_.ClearToEmpty();
}
inline const std::string& FlowMessage::sampleraddress() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SamplerAddress)
  return _internal_sampleraddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlowMessage::set_sampleraddress(ArgT0&& arg0, ArgT... args) {
 
 sampleraddress_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SamplerAddress)
}
inline std::string* FlowMessage::mutable_sampleraddress() {
  std::string* _s = _internal_mutable_sampleraddress();
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.SamplerAddress)
  return _s;
}
inline const std::string& FlowMessage::_internal_sampleraddress() const {
  return sampleraddress_.Get();
}
inline void FlowMessage::_internal_set_sampleraddress(const std::string& value) {
  
  sampleraddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlowMessage::_internal_mutable_sampleraddress() {
  
  return sampleraddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlowMessage::release_sampleraddress() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.SamplerAddress)
  return sampleraddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlowMessage::set_allocated_sampleraddress(std::string* sampleraddress) {
  if (sampleraddress != nullptr) {
    
  } else {
    
  }
  sampleraddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sampleraddress,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.SamplerAddress)
}

// uint64 TimeFlowStart = 38;
inline void FlowMessage::clear_timeflowstart() {
  timeflowstart_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowMessage::_internal_timeflowstart() const {
  return timeflowstart_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowMessage::timeflowstart() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.TimeFlowStart)
  return _internal_timeflowstart();
}
inline void FlowMessage::_internal_set_timeflowstart(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timeflowstart_ = value;
}
inline void FlowMessage::set_timeflowstart(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timeflowstart(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.TimeFlowStart)
}

// uint64 TimeFlowEnd = 5;
inline void FlowMessage::clear_timeflowend() {
  timeflowend_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowMessage::_internal_timeflowend() const {
  return timeflowend_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowMessage::timeflowend() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.TimeFlowEnd)
  return _internal_timeflowend();
}
inline void FlowMessage::_internal_set_timeflowend(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timeflowend_ = value;
}
inline void FlowMessage::set_timeflowend(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timeflowend(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.TimeFlowEnd)
}

// uint64 Bytes = 9;
inline void FlowMessage::clear_bytes() {
  bytes_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowMessage::_internal_bytes() const {
  return bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowMessage::bytes() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.Bytes)
  return _internal_bytes();
}
inline void FlowMessage::_internal_set_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bytes_ = value;
}
inline void FlowMessage::set_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.Bytes)
}

// uint64 Packets = 10;
inline void FlowMessage::clear_packets() {
  packets_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowMessage::_internal_packets() const {
  return packets_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowMessage::packets() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.Packets)
  return _internal_packets();
}
inline void FlowMessage::_internal_set_packets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  packets_ = value;
}
inline void FlowMessage::set_packets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_packets(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.Packets)
}

// bytes SrcAddr = 6;
inline void FlowMessage::clear_srcaddr() {
  srcaddr_.ClearToEmpty();
}
inline const std::string& FlowMessage::srcaddr() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcAddr)
  return _internal_srcaddr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlowMessage::set_srcaddr(ArgT0&& arg0, ArgT... args) {
 
 srcaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcAddr)
}
inline std::string* FlowMessage::mutable_srcaddr() {
  std::string* _s = _internal_mutable_srcaddr();
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.SrcAddr)
  return _s;
}
inline const std::string& FlowMessage::_internal_srcaddr() const {
  return srcaddr_.Get();
}
inline void FlowMessage::_internal_set_srcaddr(const std::string& value) {
  
  srcaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlowMessage::_internal_mutable_srcaddr() {
  
  return srcaddr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlowMessage::release_srcaddr() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.SrcAddr)
  return srcaddr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlowMessage::set_allocated_srcaddr(std::string* srcaddr) {
  if (srcaddr != nullptr) {
    
  } else {
    
  }
  srcaddr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcaddr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.SrcAddr)
}

// bytes DstAddr = 7;
inline void FlowMessage::clear_dstaddr() {
  dstaddr_.ClearToEmpty();
}
inline const std::string& FlowMessage::dstaddr() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstAddr)
  return _internal_dstaddr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlowMessage::set_dstaddr(ArgT0&& arg0, ArgT... args) {
 
 dstaddr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstAddr)
}
inline std::string* FlowMessage::mutable_dstaddr() {
  std::string* _s = _internal_mutable_dstaddr();
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.DstAddr)
  return _s;
}
inline const std::string& FlowMessage::_internal_dstaddr() const {
  return dstaddr_.Get();
}
inline void FlowMessage::_internal_set_dstaddr(const std::string& value) {
  
  dstaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlowMessage::_internal_mutable_dstaddr() {
  
  return dstaddr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlowMessage::release_dstaddr() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.DstAddr)
  return dstaddr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlowMessage::set_allocated_dstaddr(std::string* dstaddr) {
  if (dstaddr != nullptr) {
    
  } else {
    
  }
  dstaddr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstaddr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.DstAddr)
}

// uint32 Etype = 30;
inline void FlowMessage::clear_etype() {
  etype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_etype() const {
  return etype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::etype() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.Etype)
  return _internal_etype();
}
inline void FlowMessage::_internal_set_etype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  etype_ = value;
}
inline void FlowMessage::set_etype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_etype(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.Etype)
}

// uint32 Proto = 20;
inline void FlowMessage::clear_proto() {
  proto_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_proto() const {
  return proto_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::proto() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.Proto)
  return _internal_proto();
}
inline void FlowMessage::_internal_set_proto(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  proto_ = value;
}
inline void FlowMessage::set_proto(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_proto(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.Proto)
}

// uint32 SrcPort = 21;
inline void FlowMessage::clear_srcport() {
  srcport_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_srcport() const {
  return srcport_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::srcport() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcPort)
  return _internal_srcport();
}
inline void FlowMessage::_internal_set_srcport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  srcport_ = value;
}
inline void FlowMessage::set_srcport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srcport(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcPort)
}

// uint32 DstPort = 22;
inline void FlowMessage::clear_dstport() {
  dstport_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_dstport() const {
  return dstport_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::dstport() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstPort)
  return _internal_dstport();
}
inline void FlowMessage::_internal_set_dstport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dstport_ = value;
}
inline void FlowMessage::set_dstport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dstport(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstPort)
}

// uint32 InIf = 18;
inline void FlowMessage::clear_inif() {
  inif_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_inif() const {
  return inif_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::inif() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.InIf)
  return _internal_inif();
}
inline void FlowMessage::_internal_set_inif(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  inif_ = value;
}
inline void FlowMessage::set_inif(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_inif(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.InIf)
}

// uint32 OutIf = 19;
inline void FlowMessage::clear_outif() {
  outif_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_outif() const {
  return outif_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::outif() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.OutIf)
  return _internal_outif();
}
inline void FlowMessage::_internal_set_outif(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  outif_ = value;
}
inline void FlowMessage::set_outif(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_outif(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.OutIf)
}

// uint64 SrcMac = 27;
inline void FlowMessage::clear_srcmac() {
  srcmac_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowMessage::_internal_srcmac() const {
  return srcmac_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowMessage::srcmac() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcMac)
  return _internal_srcmac();
}
inline void FlowMessage::_internal_set_srcmac(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  srcmac_ = value;
}
inline void FlowMessage::set_srcmac(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_srcmac(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcMac)
}

// uint64 DstMac = 28;
inline void FlowMessage::clear_dstmac() {
  dstmac_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowMessage::_internal_dstmac() const {
  return dstmac_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlowMessage::dstmac() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstMac)
  return _internal_dstmac();
}
inline void FlowMessage::_internal_set_dstmac(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  dstmac_ = value;
}
inline void FlowMessage::set_dstmac(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dstmac(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstMac)
}

// uint32 SrcVlan = 33;
inline void FlowMessage::clear_srcvlan() {
  srcvlan_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_srcvlan() const {
  return srcvlan_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::srcvlan() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcVlan)
  return _internal_srcvlan();
}
inline void FlowMessage::_internal_set_srcvlan(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  srcvlan_ = value;
}
inline void FlowMessage::set_srcvlan(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srcvlan(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcVlan)
}

// uint32 DstVlan = 34;
inline void FlowMessage::clear_dstvlan() {
  dstvlan_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_dstvlan() const {
  return dstvlan_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::dstvlan() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstVlan)
  return _internal_dstvlan();
}
inline void FlowMessage::_internal_set_dstvlan(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dstvlan_ = value;
}
inline void FlowMessage::set_dstvlan(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dstvlan(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstVlan)
}

// uint32 VlanId = 29;
inline void FlowMessage::clear_vlanid() {
  vlanid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_vlanid() const {
  return vlanid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::vlanid() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.VlanId)
  return _internal_vlanid();
}
inline void FlowMessage::_internal_set_vlanid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vlanid_ = value;
}
inline void FlowMessage::set_vlanid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vlanid(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.VlanId)
}

// uint32 IngressVrfID = 39;
inline void FlowMessage::clear_ingressvrfid() {
  ingressvrfid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_ingressvrfid() const {
  return ingressvrfid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::ingressvrfid() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.IngressVrfID)
  return _internal_ingressvrfid();
}
inline void FlowMessage::_internal_set_ingressvrfid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ingressvrfid_ = value;
}
inline void FlowMessage::set_ingressvrfid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ingressvrfid(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.IngressVrfID)
}

// uint32 EgressVrfID = 40;
inline void FlowMessage::clear_egressvrfid() {
  egressvrfid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_egressvrfid() const {
  return egressvrfid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::egressvrfid() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.EgressVrfID)
  return _internal_egressvrfid();
}
inline void FlowMessage::_internal_set_egressvrfid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  egressvrfid_ = value;
}
inline void FlowMessage::set_egressvrfid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_egressvrfid(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.EgressVrfID)
}

// uint32 IPTos = 23;
inline void FlowMessage::clear_iptos() {
  iptos_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_iptos() const {
  return iptos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::iptos() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.IPTos)
  return _internal_iptos();
}
inline void FlowMessage::_internal_set_iptos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iptos_ = value;
}
inline void FlowMessage::set_iptos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iptos(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.IPTos)
}

// uint32 ForwardingStatus = 24;
inline void FlowMessage::clear_forwardingstatus() {
  forwardingstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_forwardingstatus() const {
  return forwardingstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::forwardingstatus() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.ForwardingStatus)
  return _internal_forwardingstatus();
}
inline void FlowMessage::_internal_set_forwardingstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  forwardingstatus_ = value;
}
inline void FlowMessage::set_forwardingstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_forwardingstatus(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.ForwardingStatus)
}

// uint32 IPTTL = 25;
inline void FlowMessage::clear_ipttl() {
  ipttl_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_ipttl() const {
  return ipttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::ipttl() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.IPTTL)
  return _internal_ipttl();
}
inline void FlowMessage::_internal_set_ipttl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ipttl_ = value;
}
inline void FlowMessage::set_ipttl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ipttl(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.IPTTL)
}

// uint32 TCPFlags = 26;
inline void FlowMessage::clear_tcpflags() {
  tcpflags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_tcpflags() const {
  return tcpflags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::tcpflags() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.TCPFlags)
  return _internal_tcpflags();
}
inline void FlowMessage::_internal_set_tcpflags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tcpflags_ = value;
}
inline void FlowMessage::set_tcpflags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tcpflags(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.TCPFlags)
}

// uint32 IcmpType = 31;
inline void FlowMessage::clear_icmptype() {
  icmptype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_icmptype() const {
  return icmptype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::icmptype() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.IcmpType)
  return _internal_icmptype();
}
inline void FlowMessage::_internal_set_icmptype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  icmptype_ = value;
}
inline void FlowMessage::set_icmptype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_icmptype(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.IcmpType)
}

// uint32 IcmpCode = 32;
inline void FlowMessage::clear_icmpcode() {
  icmpcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_icmpcode() const {
  return icmpcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::icmpcode() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.IcmpCode)
  return _internal_icmpcode();
}
inline void FlowMessage::_internal_set_icmpcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  icmpcode_ = value;
}
inline void FlowMessage::set_icmpcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_icmpcode(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.IcmpCode)
}

// uint32 IPv6FlowLabel = 37;
inline void FlowMessage::clear_ipv6flowlabel() {
  ipv6flowlabel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_ipv6flowlabel() const {
  return ipv6flowlabel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::ipv6flowlabel() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.IPv6FlowLabel)
  return _internal_ipv6flowlabel();
}
inline void FlowMessage::_internal_set_ipv6flowlabel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ipv6flowlabel_ = value;
}
inline void FlowMessage::set_ipv6flowlabel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ipv6flowlabel(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.IPv6FlowLabel)
}

// uint32 FragmentId = 35;
inline void FlowMessage::clear_fragmentid() {
  fragmentid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_fragmentid() const {
  return fragmentid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::fragmentid() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.FragmentId)
  return _internal_fragmentid();
}
inline void FlowMessage::_internal_set_fragmentid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fragmentid_ = value;
}
inline void FlowMessage::set_fragmentid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fragmentid(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.FragmentId)
}

// uint32 FragmentOffset = 36;
inline void FlowMessage::clear_fragmentoffset() {
  fragmentoffset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_fragmentoffset() const {
  return fragmentoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::fragmentoffset() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.FragmentOffset)
  return _internal_fragmentoffset();
}
inline void FlowMessage::_internal_set_fragmentoffset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fragmentoffset_ = value;
}
inline void FlowMessage::set_fragmentoffset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fragmentoffset(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.FragmentOffset)
}

// uint32 BiFlowDirection = 41;
inline void FlowMessage::clear_biflowdirection() {
  biflowdirection_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_biflowdirection() const {
  return biflowdirection_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::biflowdirection() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.BiFlowDirection)
  return _internal_biflowdirection();
}
inline void FlowMessage::_internal_set_biflowdirection(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  biflowdirection_ = value;
}
inline void FlowMessage::set_biflowdirection(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_biflowdirection(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.BiFlowDirection)
}

// uint32 SrcAS = 14;
inline void FlowMessage::clear_srcas() {
  srcas_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_srcas() const {
  return srcas_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::srcas() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcAS)
  return _internal_srcas();
}
inline void FlowMessage::_internal_set_srcas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  srcas_ = value;
}
inline void FlowMessage::set_srcas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srcas(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcAS)
}

// uint32 DstAS = 15;
inline void FlowMessage::clear_dstas() {
  dstas_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_dstas() const {
  return dstas_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::dstas() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstAS)
  return _internal_dstas();
}
inline void FlowMessage::_internal_set_dstas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dstas_ = value;
}
inline void FlowMessage::set_dstas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dstas(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstAS)
}

// bytes NextHop = 12;
inline void FlowMessage::clear_nexthop() {
  nexthop_.ClearToEmpty();
}
inline const std::string& FlowMessage::nexthop() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.NextHop)
  return _internal_nexthop();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlowMessage::set_nexthop(ArgT0&& arg0, ArgT... args) {
 
 nexthop_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.NextHop)
}
inline std::string* FlowMessage::mutable_nexthop() {
  std::string* _s = _internal_mutable_nexthop();
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.NextHop)
  return _s;
}
inline const std::string& FlowMessage::_internal_nexthop() const {
  return nexthop_.Get();
}
inline void FlowMessage::_internal_set_nexthop(const std::string& value) {
  
  nexthop_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlowMessage::_internal_mutable_nexthop() {
  
  return nexthop_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlowMessage::release_nexthop() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.NextHop)
  return nexthop_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlowMessage::set_allocated_nexthop(std::string* nexthop) {
  if (nexthop != nullptr) {
    
  } else {
    
  }
  nexthop_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nexthop,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.NextHop)
}

// uint32 NextHopAS = 13;
inline void FlowMessage::clear_nexthopas() {
  nexthopas_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_nexthopas() const {
  return nexthopas_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::nexthopas() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.NextHopAS)
  return _internal_nexthopas();
}
inline void FlowMessage::_internal_set_nexthopas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nexthopas_ = value;
}
inline void FlowMessage::set_nexthopas(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nexthopas(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.NextHopAS)
}

// uint32 SrcNet = 16;
inline void FlowMessage::clear_srcnet() {
  srcnet_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_srcnet() const {
  return srcnet_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::srcnet() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcNet)
  return _internal_srcnet();
}
inline void FlowMessage::_internal_set_srcnet(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  srcnet_ = value;
}
inline void FlowMessage::set_srcnet(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srcnet(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcNet)
}

// uint32 DstNet = 17;
inline void FlowMessage::clear_dstnet() {
  dstnet_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_dstnet() const {
  return dstnet_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::dstnet() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstNet)
  return _internal_dstnet();
}
inline void FlowMessage::_internal_set_dstnet(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dstnet_ = value;
}
inline void FlowMessage::set_dstnet(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dstnet(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstNet)
}

// bool HasMPLS = 53;
inline void FlowMessage::clear_hasmpls() {
  hasmpls_ = false;
}
inline bool FlowMessage::_internal_hasmpls() const {
  return hasmpls_;
}
inline bool FlowMessage::hasmpls() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.HasMPLS)
  return _internal_hasmpls();
}
inline void FlowMessage::_internal_set_hasmpls(bool value) {
  
  hasmpls_ = value;
}
inline void FlowMessage::set_hasmpls(bool value) {
  _internal_set_hasmpls(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.HasMPLS)
}

// uint32 MPLSCount = 54;
inline void FlowMessage::clear_mplscount() {
  mplscount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_mplscount() const {
  return mplscount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::mplscount() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.MPLSCount)
  return _internal_mplscount();
}
inline void FlowMessage::_internal_set_mplscount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mplscount_ = value;
}
inline void FlowMessage::set_mplscount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mplscount(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.MPLSCount)
}

// uint32 MPLS1TTL = 55;
inline void FlowMessage::clear_mpls1ttl() {
  mpls1ttl_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_mpls1ttl() const {
  return mpls1ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::mpls1ttl() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.MPLS1TTL)
  return _internal_mpls1ttl();
}
inline void FlowMessage::_internal_set_mpls1ttl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mpls1ttl_ = value;
}
inline void FlowMessage::set_mpls1ttl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mpls1ttl(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.MPLS1TTL)
}

// uint32 MPLS1Label = 56;
inline void FlowMessage::clear_mpls1label() {
  mpls1label_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_mpls1label() const {
  return mpls1label_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::mpls1label() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.MPLS1Label)
  return _internal_mpls1label();
}
inline void FlowMessage::_internal_set_mpls1label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mpls1label_ = value;
}
inline void FlowMessage::set_mpls1label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mpls1label(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.MPLS1Label)
}

// uint32 MPLS2TTL = 57;
inline void FlowMessage::clear_mpls2ttl() {
  mpls2ttl_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_mpls2ttl() const {
  return mpls2ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::mpls2ttl() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.MPLS2TTL)
  return _internal_mpls2ttl();
}
inline void FlowMessage::_internal_set_mpls2ttl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mpls2ttl_ = value;
}
inline void FlowMessage::set_mpls2ttl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mpls2ttl(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.MPLS2TTL)
}

// uint32 MPLS2Label = 58;
inline void FlowMessage::clear_mpls2label() {
  mpls2label_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_mpls2label() const {
  return mpls2label_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::mpls2label() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.MPLS2Label)
  return _internal_mpls2label();
}
inline void FlowMessage::_internal_set_mpls2label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mpls2label_ = value;
}
inline void FlowMessage::set_mpls2label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mpls2label(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.MPLS2Label)
}

// uint32 MPLS3TTL = 59;
inline void FlowMessage::clear_mpls3ttl() {
  mpls3ttl_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_mpls3ttl() const {
  return mpls3ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::mpls3ttl() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.MPLS3TTL)
  return _internal_mpls3ttl();
}
inline void FlowMessage::_internal_set_mpls3ttl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mpls3ttl_ = value;
}
inline void FlowMessage::set_mpls3ttl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mpls3ttl(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.MPLS3TTL)
}

// uint32 MPLS3Label = 60;
inline void FlowMessage::clear_mpls3label() {
  mpls3label_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_mpls3label() const {
  return mpls3label_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::mpls3label() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.MPLS3Label)
  return _internal_mpls3label();
}
inline void FlowMessage::_internal_set_mpls3label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mpls3label_ = value;
}
inline void FlowMessage::set_mpls3label(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mpls3label(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.MPLS3Label)
}

// uint32 MPLSLastTTL = 61;
inline void FlowMessage::clear_mplslastttl() {
  mplslastttl_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_mplslastttl() const {
  return mplslastttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::mplslastttl() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.MPLSLastTTL)
  return _internal_mplslastttl();
}
inline void FlowMessage::_internal_set_mplslastttl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mplslastttl_ = value;
}
inline void FlowMessage::set_mplslastttl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mplslastttl(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.MPLSLastTTL)
}

// uint32 MPLSLastLabel = 62;
inline void FlowMessage::clear_mplslastlabel() {
  mplslastlabel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_mplslastlabel() const {
  return mplslastlabel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::mplslastlabel() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.MPLSLastLabel)
  return _internal_mplslastlabel();
}
inline void FlowMessage::_internal_set_mplslastlabel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mplslastlabel_ = value;
}
inline void FlowMessage::set_mplslastlabel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mplslastlabel(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.MPLSLastLabel)
}

// uint32 Cid = 1000;
inline void FlowMessage::clear_cid() {
  cid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_cid() const {
  return cid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::cid() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.Cid)
  return _internal_cid();
}
inline void FlowMessage::_internal_set_cid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cid_ = value;
}
inline void FlowMessage::set_cid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.Cid)
}

// string CidString = 1001;
inline void FlowMessage::clear_cidstring() {
  cidstring_.ClearToEmpty();
}
inline const std::string& FlowMessage::cidstring() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.CidString)
  return _internal_cidstring();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlowMessage::set_cidstring(ArgT0&& arg0, ArgT... args) {
 
 cidstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.CidString)
}
inline std::string* FlowMessage::mutable_cidstring() {
  std::string* _s = _internal_mutable_cidstring();
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.CidString)
  return _s;
}
inline const std::string& FlowMessage::_internal_cidstring() const {
  return cidstring_.Get();
}
inline void FlowMessage::_internal_set_cidstring(const std::string& value) {
  
  cidstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlowMessage::_internal_mutable_cidstring() {
  
  return cidstring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlowMessage::release_cidstring() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.CidString)
  return cidstring_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlowMessage::set_allocated_cidstring(std::string* cidstring) {
  if (cidstring != nullptr) {
    
  } else {
    
  }
  cidstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cidstring,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.CidString)
}

// uint32 SrcCid = 1012;
inline void FlowMessage::clear_srccid() {
  srccid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_srccid() const {
  return srccid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::srccid() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcCid)
  return _internal_srccid();
}
inline void FlowMessage::_internal_set_srccid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  srccid_ = value;
}
inline void FlowMessage::set_srccid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srccid(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcCid)
}

// uint32 DstCid = 1013;
inline void FlowMessage::clear_dstcid() {
  dstcid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_dstcid() const {
  return dstcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::dstcid() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstCid)
  return _internal_dstcid();
}
inline void FlowMessage::_internal_set_dstcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dstcid_ = value;
}
inline void FlowMessage::set_dstcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dstcid(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstCid)
}

// .flowmessageenriched.FlowMessage.NormalizedType Normalized = 1002;
inline void FlowMessage::clear_normalized() {
  normalized_ = 0;
}
inline ::flowmessageenriched::FlowMessage_NormalizedType FlowMessage::_internal_normalized() const {
  return static_cast< ::flowmessageenriched::FlowMessage_NormalizedType >(normalized_);
}
inline ::flowmessageenriched::FlowMessage_NormalizedType FlowMessage::normalized() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.Normalized)
  return _internal_normalized();
}
inline void FlowMessage::_internal_set_normalized(::flowmessageenriched::FlowMessage_NormalizedType value) {
  
  normalized_ = value;
}
inline void FlowMessage::set_normalized(::flowmessageenriched::FlowMessage_NormalizedType value) {
  _internal_set_normalized(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.Normalized)
}

// string SrcIfName = 1003;
inline void FlowMessage::clear_srcifname() {
  srcifname_.ClearToEmpty();
}
inline const std::string& FlowMessage::srcifname() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcIfName)
  return _internal_srcifname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlowMessage::set_srcifname(ArgT0&& arg0, ArgT... args) {
 
 srcifname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcIfName)
}
inline std::string* FlowMessage::mutable_srcifname() {
  std::string* _s = _internal_mutable_srcifname();
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.SrcIfName)
  return _s;
}
inline const std::string& FlowMessage::_internal_srcifname() const {
  return srcifname_.Get();
}
inline void FlowMessage::_internal_set_srcifname(const std::string& value) {
  
  srcifname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlowMessage::_internal_mutable_srcifname() {
  
  return srcifname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlowMessage::release_srcifname() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.SrcIfName)
  return srcifname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlowMessage::set_allocated_srcifname(std::string* srcifname) {
  if (srcifname != nullptr) {
    
  } else {
    
  }
  srcifname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcifname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.SrcIfName)
}

// string SrcIfDesc = 1004;
inline void FlowMessage::clear_srcifdesc() {
  srcifdesc_.ClearToEmpty();
}
inline const std::string& FlowMessage::srcifdesc() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcIfDesc)
  return _internal_srcifdesc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlowMessage::set_srcifdesc(ArgT0&& arg0, ArgT... args) {
 
 srcifdesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcIfDesc)
}
inline std::string* FlowMessage::mutable_srcifdesc() {
  std::string* _s = _internal_mutable_srcifdesc();
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.SrcIfDesc)
  return _s;
}
inline const std::string& FlowMessage::_internal_srcifdesc() const {
  return srcifdesc_.Get();
}
inline void FlowMessage::_internal_set_srcifdesc(const std::string& value) {
  
  srcifdesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlowMessage::_internal_mutable_srcifdesc() {
  
  return srcifdesc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlowMessage::release_srcifdesc() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.SrcIfDesc)
  return srcifdesc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlowMessage::set_allocated_srcifdesc(std::string* srcifdesc) {
  if (srcifdesc != nullptr) {
    
  } else {
    
  }
  srcifdesc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), srcifdesc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.SrcIfDesc)
}

// uint32 SrcIfSpeed = 1005;
inline void FlowMessage::clear_srcifspeed() {
  srcifspeed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_srcifspeed() const {
  return srcifspeed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::srcifspeed() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcIfSpeed)
  return _internal_srcifspeed();
}
inline void FlowMessage::_internal_set_srcifspeed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  srcifspeed_ = value;
}
inline void FlowMessage::set_srcifspeed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srcifspeed(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcIfSpeed)
}

// string DstIfName = 1006;
inline void FlowMessage::clear_dstifname() {
  dstifname_.ClearToEmpty();
}
inline const std::string& FlowMessage::dstifname() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstIfName)
  return _internal_dstifname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlowMessage::set_dstifname(ArgT0&& arg0, ArgT... args) {
 
 dstifname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstIfName)
}
inline std::string* FlowMessage::mutable_dstifname() {
  std::string* _s = _internal_mutable_dstifname();
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.DstIfName)
  return _s;
}
inline const std::string& FlowMessage::_internal_dstifname() const {
  return dstifname_.Get();
}
inline void FlowMessage::_internal_set_dstifname(const std::string& value) {
  
  dstifname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlowMessage::_internal_mutable_dstifname() {
  
  return dstifname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlowMessage::release_dstifname() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.DstIfName)
  return dstifname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlowMessage::set_allocated_dstifname(std::string* dstifname) {
  if (dstifname != nullptr) {
    
  } else {
    
  }
  dstifname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstifname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.DstIfName)
}

// string DstIfDesc = 1007;
inline void FlowMessage::clear_dstifdesc() {
  dstifdesc_.ClearToEmpty();
}
inline const std::string& FlowMessage::dstifdesc() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstIfDesc)
  return _internal_dstifdesc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlowMessage::set_dstifdesc(ArgT0&& arg0, ArgT... args) {
 
 dstifdesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstIfDesc)
}
inline std::string* FlowMessage::mutable_dstifdesc() {
  std::string* _s = _internal_mutable_dstifdesc();
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.DstIfDesc)
  return _s;
}
inline const std::string& FlowMessage::_internal_dstifdesc() const {
  return dstifdesc_.Get();
}
inline void FlowMessage::_internal_set_dstifdesc(const std::string& value) {
  
  dstifdesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlowMessage::_internal_mutable_dstifdesc() {
  
  return dstifdesc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlowMessage::release_dstifdesc() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.DstIfDesc)
  return dstifdesc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlowMessage::set_allocated_dstifdesc(std::string* dstifdesc) {
  if (dstifdesc != nullptr) {
    
  } else {
    
  }
  dstifdesc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dstifdesc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.DstIfDesc)
}

// uint32 DstIfSpeed = 1008;
inline void FlowMessage::clear_dstifspeed() {
  dstifspeed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::_internal_dstifspeed() const {
  return dstifspeed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowMessage::dstifspeed() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstIfSpeed)
  return _internal_dstifspeed();
}
inline void FlowMessage::_internal_set_dstifspeed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dstifspeed_ = value;
}
inline void FlowMessage::set_dstifspeed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dstifspeed(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstIfSpeed)
}

// string ProtoName = 1009;
inline void FlowMessage::clear_protoname() {
  protoname_.ClearToEmpty();
}
inline const std::string& FlowMessage::protoname() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.ProtoName)
  return _internal_protoname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlowMessage::set_protoname(ArgT0&& arg0, ArgT... args) {
 
 protoname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.ProtoName)
}
inline std::string* FlowMessage::mutable_protoname() {
  std::string* _s = _internal_mutable_protoname();
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.ProtoName)
  return _s;
}
inline const std::string& FlowMessage::_internal_protoname() const {
  return protoname_.Get();
}
inline void FlowMessage::_internal_set_protoname(const std::string& value) {
  
  protoname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlowMessage::_internal_mutable_protoname() {
  
  return protoname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlowMessage::release_protoname() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.ProtoName)
  return protoname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlowMessage::set_allocated_protoname(std::string* protoname) {
  if (protoname != nullptr) {
    
  } else {
    
  }
  protoname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protoname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.ProtoName)
}

// string RemoteCountry = 1010;
inline void FlowMessage::clear_remotecountry() {
  remotecountry_.ClearToEmpty();
}
inline const std::string& FlowMessage::remotecountry() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.RemoteCountry)
  return _internal_remotecountry();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlowMessage::set_remotecountry(ArgT0&& arg0, ArgT... args) {
 
 remotecountry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.RemoteCountry)
}
inline std::string* FlowMessage::mutable_remotecountry() {
  std::string* _s = _internal_mutable_remotecountry();
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.RemoteCountry)
  return _s;
}
inline const std::string& FlowMessage::_internal_remotecountry() const {
  return remotecountry_.Get();
}
inline void FlowMessage::_internal_set_remotecountry(const std::string& value) {
  
  remotecountry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlowMessage::_internal_mutable_remotecountry() {
  
  return remotecountry_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlowMessage::release_remotecountry() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.RemoteCountry)
  return remotecountry_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlowMessage::set_allocated_remotecountry(std::string* remotecountry) {
  if (remotecountry != nullptr) {
    
  } else {
    
  }
  remotecountry_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remotecountry,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.RemoteCountry)
}

// .flowmessageenriched.FlowMessage.RemoteAddrType RemoteAddr = 1011;
inline void FlowMessage::clear_remoteaddr() {
  remoteaddr_ = 0;
}
inline ::flowmessageenriched::FlowMessage_RemoteAddrType FlowMessage::_internal_remoteaddr() const {
  return static_cast< ::flowmessageenriched::FlowMessage_RemoteAddrType >(remoteaddr_);
}
inline ::flowmessageenriched::FlowMessage_RemoteAddrType FlowMessage::remoteaddr() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.RemoteAddr)
  return _internal_remoteaddr();
}
inline void FlowMessage::_internal_set_remoteaddr(::flowmessageenriched::FlowMessage_RemoteAddrType value) {
  
  remoteaddr_ = value;
}
inline void FlowMessage::set_remoteaddr(::flowmessageenriched::FlowMessage_RemoteAddrType value) {
  _internal_set_remoteaddr(value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.RemoteAddr)
}

// string Note = 1014;
inline void FlowMessage::clear_note() {
  note_.ClearToEmpty();
}
inline const std::string& FlowMessage::note() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.Note)
  return _internal_note();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlowMessage::set_note(ArgT0&& arg0, ArgT... args) {
 
 note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.Note)
}
inline std::string* FlowMessage::mutable_note() {
  std::string* _s = _internal_mutable_note();
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.Note)
  return _s;
}
inline const std::string& FlowMessage::_internal_note() const {
  return note_.Get();
}
inline void FlowMessage::_internal_set_note(const std::string& value) {
  
  note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlowMessage::_internal_mutable_note() {
  
  return note_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlowMessage::release_note() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.Note)
  return note_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlowMessage::set_allocated_note(std::string* note) {
  if (note != nullptr) {
    
  } else {
    
  }
  note_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), note,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.Note)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace flowmessageenriched

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flowmessageenriched::FlowMessage_FlowType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flowmessageenriched::FlowMessage_FlowType>() {
  return ::flowmessageenriched::FlowMessage_FlowType_descriptor();
}
template <> struct is_proto_enum< ::flowmessageenriched::FlowMessage_NormalizedType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flowmessageenriched::FlowMessage_NormalizedType>() {
  return ::flowmessageenriched::FlowMessage_NormalizedType_descriptor();
}
template <> struct is_proto_enum< ::flowmessageenriched::FlowMessage_RemoteAddrType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flowmessageenriched::FlowMessage_RemoteAddrType>() {
  return ::flowmessageenriched::FlowMessage_RemoteAddrType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flow_2dmessages_2denriched_2eproto
